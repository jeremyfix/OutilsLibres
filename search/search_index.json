{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#accueil","title":"Accueil","text":"<p>Outils du logiciel libre pour l'ing\u00e9nieur by Jeremy Fix is licensed under CC BY-SA 4.0</p>"},{"location":"#structure-du-cours","title":"Structure du cours","text":"<p>Ce cours pr\u00e9sente les outils principaux du monde des logiciels libres utiles \u00e0 un ing\u00e9nieur. On abordera l'utilisation de bash pour interagir avec le syst\u00e8me, la philosophie des outils GNU et la mani\u00e8re de les combiner (pipelines, redirection d\u2019IO, ...). On verra \u00e0 cette occasion comment combiner diff\u00e9rents outils git, python, awk, sed, lynx, ffmpeg, make en les mettant en \u0153uvre pour la r\u00e9alisation de deux projets. L'\u00e9valuation se fera par la production d'un rapport, en Latex, pr\u00e9sentant un logiciel libre.</p> <p>Le cours est structur\u00e9 de la mani\u00e8re suivante :</p> <ul> <li>1 TP sur Linux, Shell, Git (4.5h)</li> <li>1 TP visant \u00e0 produire une vid\u00e9o d'une \u00e9ruption solaire</li> <li>1 TP visant \u00e0 produire une animation des temp\u00e9ratures aux \u00c9tats-Unis.</li> </ul> <p>On d\u00e9crit dans ce document un ensemble d\u2019outils libres permettant de r\u00e9soudre notamment des probl\u00e8mes que des ing\u00e9nieurs seront amen\u00e9s \u00e0 rencontrer. Ce document peut \u00eatre consid\u00e9r\u00e9 comme une boite \u00e0 outils avec un ensemble de r\u00e9f\u00e9rences et d\u2019exemples d\u2019utilisation de logiciels libres. Il a pour but d\u2019avoir un aspect pratique en ne se focalisant que sur quelques exemples d\u2019utilisation de ces logiciels sans en faire une description exhaustive.</p> <p>Si vous pensez qu'un autre outil pourrait y figurer, n'h\u00e9sitez pas \u00e0 faire une pull request ! Vos contributions sont les bienvenues.</p>"},{"location":"outils/archive/","title":"Archiver/d\u00e9sarchiver (tar, gzip, zip)","text":""},{"location":"outils/archive/#archiverdesarchiver-tar-gzip-zip","title":"Archiver/d\u00e9sarchiver (tar, gzip, zip)","text":"<p>Les outils GNU tar et gzip permettent de compresser des fichiers/r\u00e9pertoires.</p> <p>tar permet de cr\u00e9er et d'extraire des archives avec les extensions .tar ou .tar.gz. Pour compresser le r\u00e9pertoire <code>Toto</code> dans l'archive <code>toto.tar.gz</code>, on utilisera la commande:</p> <pre><code>$ tar -zcvf toto.tar.gz Toto\n</code></pre> <p>Pour extraire l'archive <code>toto.tar.gz</code> on utilisera la commande (notez que c'est juste le c chang\u00e9 en x pour compress vs extract.</p> <pre><code>$ tar -zxvf toto.tar.gz Toto\n</code></pre> <p>Il y a \u00e9galement l'outil zip. Des exemples d'utilisation sont disponibles en invoquant la commande <code>tldr zip</code>.</p>"},{"location":"outils/autotask/","title":"Automatisation de t\u00e2ches avec Makefile (make)","text":""},{"location":"outils/autotask/#automatisation-de-taches-avec-makefile-make","title":"Automatisation de t\u00e2ches avec Makefile (make)","text":"<p>L'utilitaire GNU Make permet de construire des cibles en utilisant des r\u00e8gles \u00e0 partir de d\u00e9pendances elles-m\u00eames construites \u00e0 partir de r\u00e8gles d\u00e9pendantes d'autres d\u00e9pendances, etc. et tout ceci en s'assurant de n'appeler que les r\u00e8gles strictement n\u00e9cessaires pour finalement produire la cible qui vous int\u00e9resse. De mani\u00e8re g\u00e9n\u00e9rale<sup>1</sup>, GNU make appelle une recette si jamais la cible a une date de modification plus ancienne que ses d\u00e9pendances.</p> <p>On a vu et on verra des commandes \u00e0 ex\u00e9cuter dans un terminal pour r\u00e9soudre un certain nombre de probl\u00e8mes (v\u00e9rifier l'orthographe d'un texte, travailler des images, regrouper des images pour cr\u00e9er une vid\u00e9o, lister/modifier un ensemble de fichiers, compiler un document \\LaTeX, compiler un programme, etc.). Il peut devenir difficile de se souvenir de la syntaxe d'une commande et la syntaxe peut m\u00eame devenir compliqu\u00e9e quand on souhaite encha\u00eener des commandes. Imaginez alors devoir enchainer plusieurs de ces commandes, un cauchemar. GNU Make est un des outils qui permet d'automatiser l'ex\u00e9cution de t\u00e2ches. L'outil <code>make</code> est install\u00e9 avec le paquet <code>make</code> et en g\u00e9n\u00e9ral install\u00e9 par d\u00e9faut avec la distribution. </p>"},{"location":"outils/autotask/#makefile","title":"Makefile","text":"<p>L'utilisation de <code>make</code> passe par la d\u00e9finition de fichiers Makefile qui sont trait\u00e9s par la commande make. Ces fichiers peuvent s'appeler GNUmakefile, makefile, ou Makefile. Ils contiennent un ensemble de r\u00e8gles avec une forme canonique :</p> <pre><code>cible: d\u00e9pendances\n       commandes\n</code></pre> <p>Une r\u00e8gle doit \u00eatre comprise comme d\u00e9finissant une recette de cuisine (les commandes) permettant de construire une cible si les d\u00e9pendances ont chang\u00e9. Les d\u00e9pendances sont optionnelles, on en verra un exemple un peu plus loin. Attention chaque ligne de commande doit \u00eatre pr\u00e9c\u00e9d\u00e9e par une tabulation. </p>"},{"location":"outils/autotask/#example-de-compilation-dun-document-latex","title":"Example de compilation d'un document LaTeX","text":"<p>On consid\u00e8re un exemple assez standard pour illustrer quelques concepts de Make, celui de compiler un document LaTeX. On verra plus tard que pour compiler le document document.tex, on peut utiliser l'outil latexmk. Si on devait l'\u00e9crire dans le terminal on aurait alors :</p> <pre><code>$ latexmk -pdf document.tex\n</code></pre> <p>Avec make, on peut d\u00e9finir une cible document.pdf et un alias tex de la mani\u00e8re suivante :</p> <p>Fichier Makefile </p><pre><code>document.pdf: document.tex\n    latexmk -pdf document.tex\n\ntex: document.pdf\n</code></pre> <p>Maintenant, plus besoin de se souvenir de la commande, un simple appel \u00e0 </p> <pre><code>make tex\n</code></pre> <p>suffit \u00e0 recompiler le document. D'autre part, le document ne sera recompil\u00e9 que si document.tex change. La compilation d'un document LaTeX produit plusieurs fichiers temporaires \u00e0 supprimer pour faire le m\u00e9nage. La cible clean ci-dessous est un exemple de cible sans d\u00e9pendance. On ajoute \u00e9galement la cible all qui est la cible appel\u00e9e par d\u00e9faut si on ex\u00e9cute <code>make</code> sans pr\u00e9ciser de cible ainsi qu'une cible help pour afficher un message d'aide. Attention, je rappelle que chaque ligne de commande est pr\u00e9c\u00e9d\u00e9e d'une tabulation\u202f!(et pas des espaces)}.\\</p> <p>Fichier Makefile </p><pre><code>document.pdf: document.tex\n    latexmk -pdf document.tex\n\ntex: document.pdf\n\nclean:\n    latexmk -C\n\nall:\n    make help\n\nhelp:\n    @echo \"Cibles disponibles:\"\n    @echo \"clean : nettoie le r\u00e9pertoire\"\n    @echo \"tex  : compile le document\"\n</code></pre>"},{"location":"outils/autotask/#variables-et-regles-generiques","title":"Variables et r\u00e8gles g\u00e9n\u00e9riques","text":"<p>Avec <code>make</code>, il existe quelques variables et syntaxes particuli\u00e8res, du style %@, %&lt;, %.o qui permettent d'\u00e9crire des r\u00e8gles g\u00e9n\u00e9riques. Ces variables ne sont qu'une partie des variables automatiques introduites par <code>make</code> (voir http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables) pour une liste compl\u00e8te des variables automatiques}. Par exemple, si vous \u00e9crivez un Makefile pour compiler un projet C++, la r\u00e8gle de compilation est de la forme : </p> <pre><code>$ gcc -c fichier.cc -o fichier.o  -O3 -Wall...\n</code></pre> <p>Si mon projet comprend 3 fichiers c++ \u00e0 compiler et une phase d'\u00e9dition de lien pour cr\u00e9er l'ex\u00e9cutable, on pourrait l'\u00e9crire ainsi mais c'est la mauvaise fa\u00e7on de proc\u00e9der :</p> <p>Premi\u00e8re proposition, non satisfaisante, de Makefile</p> <pre><code>fichier1.o : fichier1.cc\n          gcc -c fichier1.cc -o fichier1.o -O3 -Wall\nfichier2.o : fichier2.cc\n          gcc -c fichier2.cc -o fichier2.o -O3 -Wall\nfichier3.o : fichier3.cc\n          gcc -c fichier3.cc -o fichier3.o -O3 -Wall\nmonbinaire: fichier1.o fichier2.o fichier3.o\n          gcc -o monbinaire fichier1.o fichier2.o fichier3.o\n</code></pre> <p>Les commandes pour compiler fichier*.cc \u00e9tant les m\u00eames, on peut les \u00e9crire de mani\u00e8re plus compacte :</p> <p>Fichier Makefile</p> <pre><code>%.o : %.cc\n     gcc -c $&lt; -o $@ -O3 -Wall\n\nmonbinaire: fichier1.o fichier2.o fichier3.o\n     gcc -o $^\n</code></pre> <p>En appelant </p> <pre><code>$ make monbinaire\n</code></pre> <p>make s'occupe de recompiler les fichiers ainsi que le binaire si n\u00e9cessaire. La variable $@ fait r\u00e9f\u00e9rence \u00e0 la cible de la r\u00e8gle, $&lt; fait r\u00e9f\u00e9rence \u00e0 la d\u00e9pendance et $^ \u00e0 toutes les d\u00e9pendances. On trouvera plus d'informations sur ces variables sp\u00e9ciales \u00e0 l'adresse http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html.</p> <p>Enfin, on peut aussi g\u00e9n\u00e9rer la liste des fichiers \u00e0 compiler automatiquement. Pour cela, on dispose des fonctions wildcard et patsubst. </p> <p>Fichier Makefile</p> <pre><code>OBJ := $(patsubst %.cc,%.o,$(wildcard *.cc))\n\n%.o : %.cc\n     gcc -c $&lt; -o $@ -O3 -Wall\n\nmonbinaire: $(OBJ)\n     gcc -o $^\n</code></pre> <p>On a ici construit une variable <code>OBJ</code> qui est une liste construite de la mani\u00e8re suivante\u00a0: on cherche tous les fichiers avec l'extension .cc (<code>wildcard *.cc</code>) et on remplace l'extension .cc par .o. Il suffit alors de changer la d\u00e9pendance du binaire par le contenu de la variable <code>OBJ</code> et le tour est jou\u00e9. Maintenant, chaque fois qu'on ajoutera un fichier .cc, il sera automatiquement ajout\u00e9 \u00e0 la liste des fichiers \u00e0 compiler. </p> <p>On trouvera plus de d\u00e9tails sur les fonctions wildcard et patsubst ainsi que d'autres fonctions utilisables dans les makefiles aux adresses suivantes :</p> <ul> <li>http://www.gnu.org/software/make/manual/html_node/Wildcard-Function.html#Wildcard-Function</li> <li>http://www.gnu.org/software/make/manual/html_node/Functions.html#Functions</li> </ul>"},{"location":"outils/autotask/#pour-aller-plus-loin","title":"Pour aller plus loin","text":"<p>Il y a plein d'autres aspects que nous n'avons pas abord\u00e9s comme l'utilisation de makefile r\u00e9cursifs (un makefile \u00e0 la racine   d'un projet appelant des makefile des r\u00e9pertoires fils), la d\u00e9finition et manipulation de variables, et d'autres \u00e9l\u00e9ments   expliqu\u00e9s dans la documentation.</p> <p>On notera aussi qu'il existe une grande vari\u00e9t\u00e9 d'outils pour automatiser des t\u00e2ches comme cmake, qmake (surtout utilis\u00e9 pour des projets reposant sur la librairie Qt), scons (surtout utilis\u00e9 dans le monde Python), ant ou maven (surtout utilis\u00e9 dans le monde Java), gradle, etc. </p> <p>Voir aussi :</p> <ul> <li>Programmation/Make sur Wikibooks</li> <li>Documentation de GNU make</li> </ul> <ol> <li> <p>Certaines r\u00e8gles peuvent appliquer de mani\u00e8re inconditionn\u00e9e, sans prendre en compte les dates de modification.\u00a0\u21a9</p> </li> </ol>"},{"location":"outils/capture/","title":"Capture d'\u00e9cran photo et vid\u00e9o (OpenBroadcast Studio, gnome-screenshot)","text":""},{"location":"outils/capture/#capture-decran-photo-et-video-openbroadcast-studio-gnome-screenshot","title":"Capture d'\u00e9cran photo et vid\u00e9o (OpenBroadcast Studio, gnome-screenshot)","text":""},{"location":"outils/capture/#capture-photovideo-sous-gnome","title":"Capture photo/vid\u00e9o sous gnome","text":"<p>Si vous utilisez Ubuntu, il embarque l'outil gnome-screenshot derri\u00e8re la commande \"Take a screenshot\". Cet outil vous permet d'enregistrer une photo et une vid\u00e9o. </p> <p>Si vous voulez l'invoquer depuis la ligne de commande, il faudra l'installer :</p> <pre><code>$ sudo apt install gnome-screenshot\n</code></pre>"},{"location":"outils/capture/#capture-dune-session-de-terminal-asciinema","title":"Capture d'une session de terminal (asciinema)","text":"<p>Pour le cas d'usage tr\u00e8s particulier d'enregistrer une session de terminal, vous pouvez utiliser asciinema. Il est tr\u00e8s simple d'utilisation, allez voir la documentation.</p> <p>Par exemple, l'illustration ci-dessous de quelques commandes cascad\u00e9es pour compter le nombre de fichier dans un r\u00e9pertoire.</p>"},{"location":"outils/capture/#streaming-openbroadcast-studio-obs","title":"Streaming (OpenBroadcast Studio OBS)","text":"<p>OBS Studio est un outil qui va vous permettre d'aller bien au del\u00e0 de simplement enregistrer ce qui se passe sur votre \u00e9cran puisque on a ici carr\u00e9ment affaire \u00e0 un studio d'enregistrement. Vous allez pouvoir utiliser plusieurs sources vid\u00e9os et audio, les combiner et produire une vid\u00e9o ou streamer le r\u00e9sultat.</p> <p>Pour en savoir plus, allez voir la documentation https://obsproject.com/help.</p>"},{"location":"outils/code/","title":"Editeur de texte, IDE (vim, emacs, code)","text":""},{"location":"outils/code/#editeur-de-texte-ide-vim-emacs-code","title":"Editeur de texte, IDE (vim, emacs, code)","text":"<p>Pour coder sous Linux, vous avez plusieurs options. Parmi les IDE<sup>1</sup> (Integrated Development Environments) les plus populaires :</p> <ul> <li>vim: \u00e9diteur en \"ligne de commande\", plut\u00f4t difficile \u00e0 prendre en main, mais tr\u00e8s agr\u00e9able une fois cette courbe d'apprentissage pass\u00e9e. Vous pourrez   \u00e9diter du code \u00e0 distance (par exemple en \u00e9tant connect\u00e9 via ssh) comme quand vous \u00e9ditez du code en local.</li> <li>emacs: IDE du projet GNU. Il est   disponible en version \"graphique\" ou \"ligne de commande\". </li> <li>vs code : un IDE graphique   all-inclusive avec \u00e9norm\u00e9ment d'extensions </li> </ul> <p>VIM et Emacs sont des \u00e9diteurs compl\u00e8tement mutables. Par exemple, vous pouvez d\u00e9finir comment votre \u00e9diteur se comportent quand il ouvre un certain type de fichiers. Un \u00e9diteur comme VS code est certes plus abordable, mais plus difficilement param\u00e9trable. Dans tous les cas, choisissez l'\u00e9diteur qui vous convient et param\u00e9trez-le pour pouvoir programmer efficacement.</p>"},{"location":"outils/code/#vim","title":"VIM","text":"<p>Pour utiliser vim, vous devez apprendre vim et vous pouvez regarder la commande <code>vimtutor</code>. Vous aurez une bien meilleure exp\u00e9rience avec VIM en lui ajoutant quelques plugins. Plusieurs d\u00e9veloppeurs partagent leur \"vimrc\" sur github par exemple, peut-\u00eatre pourriez vous essayer celui-la. Au minimum, voici quelques raccourcis bien utiles\u00a0:</p> <ul> <li>vous naviguez dans la fen\u00eatre avec les touches h, j, k ,l</li> <li>par d\u00e9faut vous \u00eates en mode \"normal\". Pour \u00e9diter le contenu, vous devez   passer en mode \"insertion\" en pressant <code>i</code>. Vous quittez le mode insertion   avec <code>Echap</code>,</li> <li>on sauvegarde, depuis le mode \"normal\" avec la combinaison de touches <code>:w</code>   suivi de \"Entr\u00e9e\"</li> <li>on quitte, depuis le mode \"normal\" avec la combinaison de touches <code>:q</code>, suivi   de Entr\u00e9e</li> </ul> <p>\u00e7a, c'est le kit de survie. Apr\u00e8s, il faut apprendre :)</p> <p></p>"},{"location":"outils/code/#emacs","title":"Emacs","text":"<p>Emacs n'est pas juste un IDE \u00e9tant donn\u00e9 qu'il dispose \u00e9galement de plugins pour planifier des t\u00e2ches, \u00e9crire des mails, naviguer le syst\u00e8me de fichiers, etc. Comme pour VIM, si vous l'utilisez nu, sans configuration, vous n'aurez pas la meilleure des exp\u00e9riences. Par contre, vous trouverez une configuration initiale tr\u00e8s compl\u00e8te avec doomemacs par exemple.</p> <p></p> <p>Emacs peut para\u00eetre un peu aust\u00e8re mais il s'av\u00e8re extr\u00eamement pratique \u00e0 partir du moment ou on conna\u00eet un certain nombre de raccourcis clavier. Utiliser ces raccourcis clavier est un peu fastidieux au d\u00e9but mais devient rapidement un automatisme tr\u00e8s confortable. Attention: on indiquera un raccourcis comme Ctrl-X-F pour indiquer qu'il faut presser sur la touche Ctrl du clavier, la \\underline{maintenir} enfonc\u00e9e puis presser successivement les touches X et F. Lorsqu'on lance un raccourci, des informations peuvent \u00eatre affich\u00e9es dans la zone de texte tout en bas de l'\u00e9diteur. Voici une liste de raccourcis utiles :</p> <ul> <li>Ctrl - G : Annuler la commande en cours</li> <li>Ctrl - X - F : Ouvrir un fichier existant ou le cr\u00e9er</li> <li>Ctrl - _ : Annuler la derni\u00e8re commande</li> <li>Ctrl - X - S : Sauvegarder un fichier</li> <li>Ctrl - K : Supprimer la ligne courante \u00e0 partir du curseur</li> <li>Ctrl - W : Supprimer la s\u00e9lection</li> <li>Ctrl - X puis H : s\u00e9lectionner tout le texte du buffer courant (pratique si on poursuit par Tab pour indenter tous le buffer d'un coup)</li> <li>Tab : Indente la s\u00e9lection (en fonction du mode courant)</li> <li>Ctrl - S : Rechercher dans le fichier ouvert</li> <li>Shift - Alt - % : Rechercher/Remplacer</li> <li>Ctrl - X puis Shift - 1 : D\u00e9finir la disposition des fen\u00eatre pour n'\u00e9diter qu'un buffer \u00e0 la foi (voir les deux prochains raccourcis pour mieux comprendre!)</li> <li>Ctrl - X puis Shift - 2 : Diviser en deux la fen\u00eatre d'\u00e9dition verticalement</li> <li>Ctrl - X puis Shift - 3 : Diviser en deux la fen\u00eatre d'\u00e9dition horizontalement</li> <li>Alt - X : Saisir directement une commande dans la zone de texte en bas de l'\u00e9diteur</li> </ul> <p>Cette derni\u00e8re commande qui se lit \"Meta-X\" permet d'acc\u00e9der \u00e0 la zone de texte sous l'\u00e9diteur (mini-buffer) et dans laquelle on peut saisir des commandes comme : - goto-line : suivie d'entr\u00e9e, elle permet de saisir une ligne \u00e0 laquelle se rendre (pratique si la compilation d'un fichier \u00e9choue et qu'un num\u00e9ro de ligne ou se trouve l'erreur est mentionn\u00e9 - comment-region : commente la s\u00e9lection - uncomment-region : d\u00e9commente la s\u00e9lection - ispell-change-dictionnary : pour changer le dictionnaire utilis\u00e9 pour la correction orthographique en ligne - flyspell-buffer : pour lancer le correcteur orthographique sur tous le buffer courant - flyspell-mode : pour activer/d\u00e9sactiver la correction orthographique \u00e0 la vol\u00e9e - c++-mode : basculer en mode C++ (pour la coloration syntaxique, l'indentation, etc...) - python-mode : basculer en mode Python (pour la coloration syntaxique, l'indentation, etc...) - tuareg-mode : basculer en mode CamL (pour la coloration syntaxique, l'indentation, etc...) - octave-mode : basculer en mode Octave (pour la coloration syntaxique, l'indentation, etc...)</p> <p>N'oubliez pas que dans le monde Unix, la tabulation permet d'auto-compl\u00e9ter une commande. Par exemple, pour la commande uncomment-region, il suffira de saisir unc suivi de Tabulation pour que la commande soit compl\u00e9t\u00e9e. Si plusieurs commandes ont le m\u00eame pr\u00e9fixe, une liste des choix s'affiche si on appuis deux fois sur tabulation.</p> <p>Revenons quelques instants sur la notion de mode dans emacs. emacs est \u00e9crit pour \u00eatre modulable et adaptable \u00e0 ses besoins (plus besoin d'un \u00e9diteur sp\u00e9cifique pour \u00e9diter du texte, du latex, du C++, etc. emacs se sp\u00e9cialise en fonction de l'extension du fichier \u00e9dit\u00e9). Les modes pour emacs introduisent justement cette flexibilit\u00e9. On parlait plus haut des modes c++, python, tuareg qui modifient les menus de l'\u00e9diteur, les raccourcis claviers, l'indentation, la coloration syntaxique. Ces modes sont appel\u00e9s modes majeurs. Il en existe plusieurs pour les langages de programmation les plus r\u00e9pandus (http://fr.wikipedia.org/wiki/Emacs). En pratique, ces modes sont \u00e9crits comme des scripts Lisp. Il est \u00e9galement possible de personnaliser l'interface \u00e0 l'aide de scripts Lisp.</p>"},{"location":"outils/code/#vs-code","title":"VS Code","text":"<p>VS Code est un tr\u00e8s bon outil. Il vient tout \u00e9quip\u00e9, avec une tr\u00e8s grande collection d'extensions. Vous pourrez coder dans plein de langage, avec d\u00e9bugueur int\u00e9gr\u00e9, mod\u00e8les de langue (e.g. copilot), plugin GIT, terminal, etc. </p> <p></p> <ol> <li> <p>Coder se fait avec un IDE. Les outils tels que gedit, nano ne sont pas des IDE, ce sont des \u00e9diteurs de texte. Un IDE vous offre la coloration syntaxique, l'indentation, un d\u00e9bugueur, etc.\u00a0\u21a9</p> </li> </ol>"},{"location":"outils/compare/","title":"Comparer deux fichiers ou deux arborescences (diff)","text":""},{"location":"outils/compare/#comparer-deux-fichiers-ou-deux-arborescences-diff","title":"Comparer deux fichiers ou deux arborescences (diff)","text":"<p>L'outil <code>diff</code> permet de comparer le contenu, ligne \u00e0 ligne, de deux fichiers, ou de comparer deux arborescences.</p> <p>Vous trouverez beaucoup d'exemples d'utilisation de diff dans le manuel GNU de diff.</p>"},{"location":"outils/correction/","title":"Correction orthographique/grammaticale (aspell, hunspell, LanguageTool)","text":""},{"location":"outils/correction/#correction-orthographiquegrammaticale-aspell-hunspell-languagetool","title":"Correction orthographique/grammaticale (aspell, hunspell, LanguageTool)","text":"<p>Il existe un certain nombre de logiciels libres pour la correction orthographique et/ou grammaticale, notamment <code>ispell</code>, aspell, myspell, hunspell, LanguageTool, ... . </p> <p>L'historique des diff\u00e9rentes versions xxxspell n'est pas tr\u00e8s clair. ispell semble \u00eatre le plus ancien, sur lequel est bas\u00e9 myspell; aspell semble avoir \u00e9t\u00e9 d\u00e9velopp\u00e9 pour prendre le relais d'ispell. hunspell quant \u00e0 lui est le correcteur orthographique qui semble prendre la main<sup>1</sup>; il est utilis\u00e9 dans un grand nombre d'applications comme Firefox, Thunderbird, Chrome, Eclipse\u2026, </p> <p>LanguageTool semble avoir \u00e9t\u00e9 d\u00e9velopp\u00e9 plus r\u00e9cemment et ind\u00e9pendamment. Contrairement aux xxx-spell, LanguageTool corrige les formes de style \u00e9vitant ainsi, par exemple, l'utilisation de pl\u00e9onasmes (au jour d'aujourd'hui), l'utilisation de deux virgules cons\u00e9cutives, etc.</p> <p>Pour installer ces logiciels (on pr\u00e9f\u00e9rera aspell, hunspell ou LanguageTool) sous Fedora :</p> <pre><code># Aspell\n\n## Sur Fedora/RedHat\n# yum install aspell aspell-fr aspell-en\ndnf install aspell aspell-fr aspell-en\n\n## Sur Ubuntu/Debian\napt install aspell aspell-fr aspell-en\n\n\n# Hunspell\n\n## Sur Fedora/RedHat\n# yum install hunspell hunspell-fr hunspell-en\ndnf install hunspell hunspell-fr hunspell-en\n\n## Sur Ubuntu/Debian\napt install hunspell hunspell-fr hunspell-en\n\n# LanguageTool\n# Aller voir sur la page du projet\n</code></pre> <p>Tous ces outils sont utilisables en ligne de commande (i.e. dans un terminal, depuis un Makefile, ...). Pour tester les possibilit\u00e9s des diff\u00e9rents correcteurs, on partira du texte ci-dessous, les fautes \u00e9tant indiqu\u00e9es en rouge :</p> <p>Ma\u00eetre Corbeau, sur un arbre perchai, Tenais en son beck un fromage. Ma\u00eetre Renard, par l'odeur all\u00e9ch\u00e9, Lui tint \u00e0 peu pr\u00e8s ce langage : \"H\u00e9 ! bonjour, Monsieur du Corbeau. Que vous \u00eates joli ! que vous me semblez beau ! Sans mentir, si votre ramage Se rapporte \u00e0 votre plumage, Vous \u00eates le Ph\u00e9nix des h\u00f4tes de ces bois. \" A ces mots le Corbeau ne se sent pas de joie ; Et pour montrer sa belle voix, Il ouvre un large bec, laisse tomber sa proie. Le Renard s'en saisie, et dis : \"Mon bon Monsieur, Appren\u00e9 que tout flatteur Vit aux d\u00e9pens de celui qui l'\u00e9coute : Cette le\u00e7on vaut bien un fromage, sans doute. \" Le Corbeau, honteux et confus, Jura, mais un peu tard, qu'on ne l'y prendrait plus.</p>"},{"location":"outils/correction/#aspell","title":"Aspell","text":"<p>aspell s'appelle avec une commande de la forme :</p> <pre><code>$ aspell check [options] filename\n</code></pre> <p>Plusieurs options sont disponibles, on ne liste que les plus utiles, mais d'autres sont document\u00e9es sur la documentation</p> <ul> <li><code>--lang=name</code> avec name \\(\\in\\) (fr, en, ..) sp\u00e9cifie le langage,</li> <li><code>--mode=mode</code> avec mode \\(\\in\\) (none, url, email, sgml, tex, texinfo, nroff,   ...) permet de filtrer des mots sp\u00e9cifiques de langage (par exemple le mode   tex permet de ne pas consid\u00e9rer les mots clefs LaTeX)</li> </ul> <p>Pour plus d\"informations sur les options :</p> <pre><code>$ aspell --help\n</code></pre> <p>Par exemple, pour corriger les fautes d'orthographes d'un fichier texte, on utilisera: </p><pre><code>$ aspell check -lfr text.txt\n</code></pre> <p>Pur corriger les fautes d'orthographes d'un fichier LaTeX, on utilisera:</p> <pre><code>$ aspell check -lfr --mode=tex text.tex\n</code></pre> <p>Ces deux commandes lancent aspell en mode interactif, permettant de corriger les fautes \u00e0 la vol\u00e9e (le fichier original est modifi\u00e9). On peut aussi lister les fautes, sans les corriger. Sur le texte de Jean de la Fontaine, aspell retourne :</p> <pre><code>$ cat original.txt | aspell -lfr list\nbeck\nAppren\u00e9\n</code></pre>"},{"location":"outils/correction/#hunspell","title":"Hunspell","text":"<p>hunspell fonctionne de mani\u00e8re similaire \u00e0 aspell, les options \u00e9tant sp\u00e9cifi\u00e9es de mani\u00e8re un peu diff\u00e9rente. Pour avoir plus d'informations sur les options \u00e0 passer au programme, on utilisera </p><pre><code>$ hunspell --help\n</code></pre> <p>Pour v\u00e9rifier l'orthographe d'un texte en fran\u00e7ais, on utilisera la commande :</p> <pre><code>$ hunspell -d fr_FR text.txt\n</code></pre> <p>Pour v\u00e9rifier un document \\LaTeX, on pr\u00e9cisera l'option <code>-t</code>:</p> <pre><code>hunspell -d fr_FR -t text.tex\n</code></pre> <p>On peut aussi lister les fautes, sans les corriger. Sur le texte de Jean de la Fontaine, hunspell retourne:</p> <pre><code>hunspell -d fr_FR -l original.txt\nbeck\nAppren\u00e9\n</code></pre>"},{"location":"outils/correction/#languagetool","title":"LanguageTool","text":"<p>Il y a plusieurs fa\u00e7ons d'utiliser language tool. Parfois, il est directement disponible dans votre outil, par exemple, il existe une extension pour LibreOffice. Vous pouvez \u00e9galement solliciter l'API http :</p> <pre><code>$ curl -d \"text=This is an test.\" -d \"language=auto\" https://api.languagetool.org/v2/check\n</code></pre> <p>Vous pouvez \u00e9galement faire tourner localement un serveur de correction. Voir https://dev.languagetool.org/http-server \u00e0 ce sujet.</p> <p>En lan\u00e7ant LanguageTool en ligne de commande sur notre texte d'exemple :</p> <pre><code>$ java -jar languagetool-commandline.jar -l fr original.txt \n\nExpected text language: French\nWorking on original.txt...\n1.) Line 1, column 30, Rule ID: ACCORD_R_PERS_VERBE[32] premium: false prio=10\nMessage: V\u00e9rifiez l\u2019accord entre le sujet et le verbe \u00ab\u00a0perchai\u00a0\u00bb.\nSuggestion: perchait\nMa\u00eetre Corbeau, sur un arbre perchai, Tenais en son beck un fromage. Ma\u00eetre Renar...\n                             ^^^^^^^                                             \n\n2.) Line 1, column 30, Rule ID: ACCORD_SUJET_VERBE[39] premium: false\nMessage: Un verbe conjugu\u00e9 \u00e0 la troisi\u00e8me personne du singulier semble plus appropri\u00e9.\nSuggestion: perchait\nMa\u00eetre Corbeau, sur un arbre perchai, Tenais en son beck un fromage. Ma\u00eetre Renar...\n                             ^^^^^^^                                             \n\n3.) Line 2, column 15, Rule ID: FR_SPELLING_RULE premium: false prio=-100\nMessage: Faute de frappe possible trouv\u00e9e.\nSuggestion: bec; becs; Besse; teck; Becky\n...Corbeau, sur un arbre perchai, Tenais en son beck un fromage. Ma\u00eetre Renard, par l'odeur all\u00e9c...\n                                                ^^^^                                             \n\n4.) Line 8, column 28, Rule ID: PRONOMS_PERSONNELS_MINUSCULE[2] premium: false\nMessage: La majuscule n\u2019est employ\u00e9e qu\u2019au d\u00e9but d\u2019une phrase ou pour les noms propres (noms, toponymes, etc.).\nSuggestion: . Vous; , vous\n..., si votre ramage Se rapporte \u00e0 votre plumage, Vous \u00eates le Ph\u00e9nix des h\u00f4tes de ces bois. \" A ce...\n                                                ^^^^^^                                             \n\n5.) Line 10, column 1, Rule ID: A_A_ACCENT[1] premium: false prio=10\nMessage: La pr\u00e9position \u00ab\u00a0\u00c0\u00a0\u00bb plac\u00e9e en d\u00e9but de phrase poss\u00e8de un accent grave.\nSuggestion: \u00c0\n...Vous \u00eates le Ph\u00e9nix des h\u00f4tes de ces bois. \" A ces mots le Corbeau ne se sent pas de joie ;...\n                                                ^                                             \n\n6.) Line 11, column 30, Rule ID: PRONOMS_PERSONNELS_MINUSCULE[2] premium: false\nMessage: La majuscule n\u2019est employ\u00e9e qu\u2019au d\u00e9but d\u2019une phrase ou pour les noms propres (noms, toponymes, etc.).\nSuggestion: . Il; , il\n...t pas de joie ; Et pour montrer sa belle voix, Il ouvre un large bec, laisse tomber sa proie. ...\n                                                ^^^^                                             \n\n7.) Line 13, column 27, Rule ID: ACCORD_SUJET_VERBE[35] premium: false\nMessage: Un verbe conjugu\u00e9 \u00e0 la troisi\u00e8me personne semble plus appropri\u00e9.\nSuggestion: dit; disent\n...e tomber sa proie. Le Renard s'en saisie, et dis : \"Mon bon Monsieur, Appren\u00e9 que tout flatte...\n                                                ^^^                                             \nMore info: https://languagetool.org/insights/fr/poste/je-me-permet-ou-je-me-permets/\n\n8.) Line 14, column 1, Rule ID: FR_SPELLING_RULE premium: false prio=-100\nMessage: Faute de frappe possible trouv\u00e9e.\nSuggestion: Apprenne; Apprend; Apprenait; Appr\u00eat\u00e9; \u00c2pret\u00e9\n...ard s'en saisie, et dis : \"Mon bon Monsieur, Appren\u00e9 que tout flatteur Vit aux d\u00e9pens de celui qu...\n                                                ^^^^^^^                                             \nTime: 1551ms for 7 sentences (4.5 sentences/sec) \n</code></pre>"},{"location":"outils/correction/#integrer-un-correcteur-dans-son-ide-emacs-vim-vscode","title":"Int\u00e9grer un correcteur dans son IDE emacs, vim, vscode","text":"<p>aspell et hunspell peuvent \u00eatre int\u00e9gr\u00e9s \u00e0 emacs pour avoir une correction orthographique \u00e0 la vol\u00e9e. On peut personnaliser emacs en ajoutant des commandes Lisp au fichier <code>~/.emacs</code>. Pour indiquer qu'on souhaite utiliser aspell pour v\u00e9rifier l'orthographe, on ajoutera la commande:</p> <pre><code>(setq-default ispell-program-name \"aspell\")\n</code></pre> <p>On utilisera alors la correction orthographique avec les commandes ci-dessous, \u00e0 ex\u00e9cuter dans le mini-buffer (<code>Meta-X</code>, Alt - X)</p> <ul> <li>ispell-change-dictionnary , suivi de fr ou en par exemple </li> <li>flyspell-buffer : v\u00e9rifie l'orthographe du fichier en cours d'\u00e9dition</li> <li>flyspell-mode : active/d\u00e9sactive la correction \u00e0 la vol\u00e9e</li> </ul> <p>On fera bien attention que lorsque le dictionnaire est chang\u00e9, il faut relancer la commande <code>flyspell-buffer</code> pour le prendre en compte.</p> <p>Dans VIM, pour pouvoir facilement activer la correction orthographique, on peut se d\u00e9finir quelques raccourcis dans son <code>~/.vimrc</code>:</p> <pre><code>function! ToggleSpellLang()\n    \" toggle between en and fr\n    if &amp;spelllang =~# 'en'\n        :set spelllang=fr\n    else\n        :set spelllang=en\n    endif\nendfunction\n\n\" Note: with Byobu, press Shift-F12 to disable byobu function keys capture\nnnoremap &lt;F7&gt; :setlocal spell!&lt;CR&gt; \" toggle spell on or off\nnnoremap &lt;F8&gt; :call ToggleSpellLang()&lt;CR&gt; \" toggle language\n</code></pre> <p>ce qui permettra d'activer/d\u00e9sactiver la v\u00e9rification orthographique avec F7, de changer la langue avec F8. Ensuite, on passe d'une erreur \u00e0 l'autre avec les touches \"[s\", on obtient des suggestions de modification avec \"z=\". On peut aussi int\u00e9grer LanguageTool en utilisant le plugin ALE ou vim-LanguageTool.</p> <p>Sous VSCode, il semble aussi exister des extensions, par exemple LTex+ pour utiliser LanguageTool.</p> <ol> <li> <p>Plus d'informations sont disponibles sur la page http://en.wikipedia.org/wiki/Hunspell \u21a9</p> </li> </ol>"},{"location":"outils/familiarisation/","title":"Familiarisation avec le syst\u00e8me Unix","text":""},{"location":"outils/familiarisation/#familiarisation-avec-lenvironnement-unix","title":"Familiarisation avec l'environnement Unix","text":""},{"location":"outils/familiarisation/#permissions","title":"Permissions","text":"<p>Les permissions sont extr\u00eamement importantes sous Linux. Chaque utilisateur Linux a un nom d'utilisateur et appartient \u00e0 un ou plusieurs groupes.</p> <p>Les commandes ci-dessous vous indiquent ces \u00e9l\u00e9ments :</p> <pre><code>id\necho $USER\ngroups\n</code></pre> <p>En fonction des groupes auxquels un utilisateur appartient, il va disposer de droits particuliers. Par exemple :</p> <ul> <li>un membre du groupe <code>sudo</code> va pouvoir passer super utilisateur et faire   tout ce qu'il veut sur le syst\u00e8me comme installer des logiciels, lire des   fichiers de s\u00e9curit\u00e9, supprimer n'importe quoi</li> <li>un membre du groupe <code>docker</code> va pouvoir lancer des images docker</li> <li>un membre du groupe <code>lpadmin</code> va pouvoir administrer le serveur d'impression   CUPS, </li> <li>\u2026</li> </ul> <p>Sur les machines de l'\u00e9cole, vous \u00eates en g\u00e9n\u00e9ral membre d'un groupe regroupant l'ensemble des coll\u00e8gues de votre promotion. </p> <p>Les permissions donn\u00e9es \u00e0 un groupe d\u00e9pendent de flags. Ces permissions sont de trois types :</p> <ul> <li>permission de lire un fichier ou lister le contenu d'un r\u00e9pertoire</li> <li>permission d'\u00e9crire (modifier) un fichier, ou de cr\u00e9er, supprimer, d\u00e9placer   des \u00e9l\u00e9ments d'un r\u00e9pertoire</li> <li>permission d'ex\u00e9cuter un fichier et d'acc\u00e9der au contenu d'un r\u00e9pertoire.</li> </ul> <p>Ces permissions sont bien souvent not\u00e9es \"rwx\" pour r-ead, w-rite, e-x-ecute, donc 3 flags, chacun binaire, \\(8\\) possibilit\u00e9s en tout de \\(0\\) \u00e0 \\(7\\). Chaque fichier/r\u00e9pertoire appartient toujours \u00e0 un utilisateur et \u00e0 un groupe, ce qui conduit \u00e0 \\(3\\) groupes de permissions :</p> <ul> <li>le propri\u00e9taire du fichier/r\u00e9pertoire</li> <li>les membres du groupe propri\u00e9taire du fichier/r\u00e9pertoire</li> <li>le reste du monde</li> </ul> <p>Comme on a \\(3\\) paquets de \\(3\\) permissions, on les repr\u00e9sente habituellement en octal avec \\(3\\) chiffres entre \\(0\\) et \\(7\\) pour chaque groupe d'utilisateurs. On parlera par exemple de permissions :</p> <ul> <li>\\(777\\) pour rwx pour les \\(3\\) groupes d'utilisateurs</li> <li>\\(755\\) quand on veut \\(rwx\\) pour le propri\u00e9taire, mais supprimer \\(x\\) pour tous   les autres</li> <li>\\(600\\) pour <code>rw</code> pour l'utilisateur, mais sans droit de lecture/modification   pour les autres, ce qui est requis pour une cl\u00e9 ssh priv\u00e9e</li> <li>\\(644\\) pour <code>rw</code> pour l'utilisateur et les droits de lecture pour les autres,   ce qui est requis pour une cl\u00e9 publique SSH.</li> </ul> <p>Pour acc\u00e9der aux propri\u00e9t\u00e9s d'un fichier/r\u00e9pertoire, un <code>ls -l</code> vous les liste, et on trouvera par exemple :</p> <pre><code>-rw-r--r--   1 fix_jer morbluc        5096 d\u00e9c.  23 09:31  .zshrc\n</code></pre> <p>Les permissions sont indiqu\u00e9es tout \u00e0 gauche : <code>rw-r--r--</code>. Le premier tiret <code>-</code> est un flag particulier pour indiquer si on a affaire \u00e0 un fichier <code>-</code>, un r\u00e9pertoire <code>d</code> ou un lien symbolique <code>l</code>.</p> <p>Pour les permissions sur ce fichier, si on les d\u00e9cortique : - l'utilisateur <code>fix_jer</code> a le droit de lire et modifier le fichier (mais pas   d'ex\u00e9cuter) - les utilisateurs du groupe <code>morbluc</code> ont le droit de lire le fichier (mais pas   d'\u00e9crire ni d'ex\u00e9cuter) - les autres utilisateurs ont le droit de lire le fichier (mais pas d'\u00e9crire ni   d'ex\u00e9cuter)</p> <p>Prenons un autre exemple </p> <pre><code>ls -l /proc/\ndr-xr-xr-x   6 root root 0 avril  1 06:01 tty\n-r--r--r--   1 root root 0 avril  1 06:00 uptime\n-r--r--r--   1 root root 0 avril  1 06:01 version\n-r--r--r--   1 root root 0 avril  1 06:01 version_signature\n-r--------   1 root root 0 avril  1 06:01 vmallocinfo\n-r--r--r--   1 root root 0 avril  1 06:01 vmstat\n-r--r--r--   1 root root 0 avril  1 06:01 zoneinfo\n</code></pre> <p>On voit ici plusieurs permissions, chaque fois pour l'utilisateur <code>root</code> et le groupe <code>root</code>. Si vous avez besoin de modifier les permissions, par exemple pour rendre un fichier (non-)modifiable ou ex\u00e9cutable, vous utiliserez la commande <code>chmod</code>. Cette commande prend en entr\u00e9e les nouvelles permissions en octal.</p> <pre><code>info \"File permissions\"\n</code></pre>"},{"location":"outils/familiarisation/#systeme-de-fichiers","title":"Syst\u00e8me de fichiers","text":"<p>Les r\u00e9pertoires Linux respectent une certaine organisation. D'abord, ils ne sont pas organis\u00e9s comme sous Windows en \"C:/xxxx/yyy/\" mais sont explicitement une structure arborescente commen\u00e7ant par un slash \"/\" qui est ce qu'on appelle \"la racine\" du syst\u00e8me de fichier. Et on trouve ensuite des sous-r\u00e9pertoires :</p> <pre><code>/\n/home/fix_jer\n/etc/\n/var/log\n/proc/\n/opt/\n/tmp/\n/usr/\n...\n</code></pre> <p>Et je vous invite \u00e0 lire les pages de manuel \u00e0 ce sujet :</p> <pre><code>info file-hierarchy\nman file-hierarchy\n</code></pre> <p>Vos fichiers/r\u00e9pertoires sont dans votre espace utilisateur, qu'on appelle \"le home\". On peut le localiser avec la variable d'environnement <code>$HOME</code> :</p> <pre><code>echo $HOME\n</code></pre> <p>Vous avez en g\u00e9n\u00e9ral toutes les permissions pour faire ce que vous voulez dans cet espace. On trouvera ensuite des r\u00e9pertoires qui h\u00e9bergent des fichiers pour une certaine fonction :</p> <ul> <li><code>/etc</code> va contenir des fichiers de configuration. Par exemple un serveur nginx mettre ses fichiers de configuration dans <code>/etc/nginx</code>. Le gestionnaire de paquet sous Ubuntu met ses fichiers de configuration dans <code>/etc/apt/</code>, ...</li> <li><code>/var/log</code> va contenir les logs de diff\u00e9rents processus qui tournent sur votre   syst\u00e8me. Par exemple <code>/var/log/Xorg.0.log</code> contiendra les logs du serveur   d'affichage Xorg, <code>/var/log/apacha</code></li> <li><code>/usr/bin</code> contient les ex\u00e9cutables</li> <li><code>/usr/include</code> les fichiers d'ent\u00eate des librairies C/C++ install\u00e9es</li> <li><code>/usr/lib</code> les librairies install\u00e9es</li> <li><code>/run/user/</code> des fichiers temporaires des processus en cours d'ex\u00e9cution pour un   utilisateur</li> <li><code>/tmp</code> un r\u00e9pertoire nettoy\u00e9 au d\u00e9marage qui n'a vocation qu'\u00e0 h\u00e9berger des   fichiers temporaires</li> <li><code>/dev/</code> un r\u00e9pertoire contenant des fichiers pour interagir avec des   p\u00e9riph\u00e9riques. Par exemple <code>/dev/js0</code> pour un joystick, <code>/dev/video0</code> pour une   webcam, ...</li> <li><code>/mnt</code> contient en g\u00e9n\u00e9ral les points de montage par exemple de cl\u00e9s/disques   USB branch\u00e9s, de p\u00e9riph\u00e9riques r\u00e9seaux, etc..</li> <li>...</li> </ul>"},{"location":"outils/familiarisation/#installations-logicielles","title":"Installations logicielles","text":"<p>Pour installer des logiciels, il existe plein de fa\u00e7on, mais disons que la premi\u00e8re \u00e0 privil\u00e9gier est de passer par le gestionnaire de paquets de votre distribution. En fonction des familles de distribution, ce ne sera pas le m\u00eame gestionnaire :</p> <ul> <li>fedora/redhat : dnf, yum</li> <li>debian/ubuntu : apt</li> <li>arch : pacman</li> <li>MacOS : brew</li> </ul> <p>Le gestionnaire de paquet est construit pour g\u00e9rer lui m\u00eame les \u00e9ventuelles d\u00e9pendances d'un logiciel. Pas besoin de le faire vous m\u00eame. Il garde \u00e9galement une trace des paquets install\u00e9s par d\u00e9pendance, de telle que si vous supprimez un paquet, il peut vous sugg\u00e9rer de supprimer les paquets install\u00e9s par d\u00e9pendance. Pratique pour faire le m\u00e9nage !</p> <p>Il existe des serveurs officiels, centralis\u00e9s, s\u00e9curis\u00e9s, qui h\u00e9bergent les logiciels. Bien s\u00fbr, tout un chacun peut \u00e9galement offrir un serveur de logiciel et \u00e0 ce moment-l\u00e0, \u00e0 vous de choisir de prendre ou non le risque d'ajouter ce d\u00e9p\u00f4t logiciel. </p> <p>Par exemple, pour installer VS Code sous Ubuntu </p> <pre><code>$ sudo apt info code\nPackage: code\nVersion: 1.99.1-1743784529\nPriority: optional\nSection: devel\nMaintainer: Microsoft Corporation &lt;vscode-linux@microsoft.com&gt;\nInstalled-Size: 423 MB\nProvides: visual-studio-code\nDepends: ca-certificates, libasound2 (&gt;= 1.0.17), libatk-bridge2.0-0 (&gt;= 2.5.3), libatk1.0-0 (&gt;= 2.11.90), libatspi2.0-0 (&gt;= 2.9.90), libc6 (&gt;= 2.14), libc6 (&gt;= 2.16), libc6 (&gt;= 2.17), libc6 (&gt;= 2.2.5), libc6 (&gt;= 2.25), libc6 (&gt;= 2.28), libcairo2 (&gt;= 1.6.0), libcurl3-gnutls | libcurl3-nss | libcurl4 | libcurl3, libdbus-1-3 (&gt;= 1.9.14), libexpat1 (&gt;= 2.1~beta3), libgbm1 (&gt;= 17.1.0~rc2), libglib2.0-0 (&gt;= 2.37.3), libgtk-3-0 (&gt;= 3.9.10), libgtk-3-0 (&gt;= 3.9.10) | libgtk-4-1, libnspr4 (&gt;= 2:4.9-2~), libnss3 (&gt;= 2:3.30), libnss3 (&gt;= 3.26), libpango-1.0-0 (&gt;= 1.14.0), libudev1 (&gt;= 183), libx11-6, libx11-6 (&gt;= 2:1.4.99.1), libxcb1 (&gt;= 1.9.2), libxcomposite1 (&gt;= 1:0.4.4-1), libxdamage1 (&gt;= 1:1.1), libxext6, libxfixes3, libxkbcommon0 (&gt;= 0.5.0), libxkbfile1 (&gt;= 1:1.1.0), libxrandr2, xdg-utils (&gt;= 1.0.2)\nRecommends: libvulkan1\nConflicts: visual-studio-code\nReplaces: visual-studio-code\nHomepage: https://code.visualstudio.com/\nDownload-Size: 104 MB\nAPT-Sources: https://packages.microsoft.com/repos/code stable/main amd64 Packages\nDescription: Code editing. Redefined.\n Visual Studio Code is a new choice of tool that combines the simplicity of\n a code editor with what developers need for the core edit-build-debug cycle.\n See https://code.visualstudio.com/docs/setup/linux for installation\n instructions and FAQ.\n\n$ sudo apt install code\n...\n</code></pre>"},{"location":"outils/familiarisation/#philosophie-unix-do-one-thing-and-do-it-well","title":"Philosophie Unix : Do One Thing and Do It Well","text":"<p>Comme vous le verrez dans la suite du site et pendant les TPs, on va combiner pleins de \"petites\" commandes. La philosophie Unix est d'\u00e9crire des \"petits\" programmes qui s'attaquent \u00e0 un probl\u00e8me en particulier avec l'id\u00e9e de pouvoir combiner tout ces programmes entre eux. </p> <p>La mani\u00e8re de combiner des programmes entre eux se fait gr\u00e2ce au \"pipe\", le symbole <code>|</code>. Dans le TP Bash \u00e0 sable, on discutera justement de l'\"entr\u00e9e standard\", la \"sortie standard\" et la \"sortie d'erreur\". Ce sont des entr\u00e9es/sorties qui sont connect\u00e9es par des \"pipe\" (tuyaux).</p> <p>Par exemple, pour trouver les \\(10\\) plus gros fichiers dans un r\u00e9pertoire, on peut combiner :</p> <ul> <li><code>du</code> qui retourne la taille occup\u00e9e par un fichier/r\u00e9pertoire</li> <li><code>sort</code> qui trie ce qu'il re\u00e7oit en entr\u00e9e avec la possibilit\u00e9 que les nombres   \u00e0 trier soient suffix\u00e9s d'une unit\u00e9 Mega, Giga</li> <li><code>tail</code> qui ne retient que les \\(x\\) derni\u00e8res lignes de ce qu'il re\u00e7oit en   entr\u00e9e</li> </ul> <p>Combinez ensemble, on obtient la commande <code>du * -sh | sort -h | tail -10</code> qui va vous retourner les \\(10\\) plus gros fichiers/r\u00e9pertoires dans le r\u00e9pertoire courant.</p> <p>Autre exemple, pour calculer combien de fichiers sont pr\u00e9sents dans un r\u00e9pertoire, on peut combiner :</p> <ul> <li><code>ls</code> qui liste tous les \u00e9l\u00e9ments pr\u00e9sents dans un r\u00e9pertoire et, avec l'option   <code>-p</code> lui demander de suffixer les r\u00e9pertoires du symbole <code>/</code></li> <li><code>grep</code> qui permet de rechercher un motif. On lui demande de recherche le motif   <code>/</code> et de retourner ce qui ne contient pas ce motif <code>-v</code></li> <li><code>wc</code> qui permet de compter le nombre de lignes <code>-l</code> (mais peut aussi compter   le nombre de mots <code>-w</code>, de caract\u00e8res <code>-c</code>, ...)</li> </ul> <p>Ce qui donne la commande <code>ls -p | grep -v / | wc -l</code></p>"},{"location":"outils/filtrage/","title":"Filtrage et manipulation de documents (awk, sed)","text":""},{"location":"outils/filtrage/#filtrage-et-manipulation-de-documents-awk-sed","title":"Filtrage et manipulation de documents (awk, sed)","text":"<p>Les utilitaires <code>awk</code> et <code>sed</code> vous permettent de filtrer des documents selon leur contenu, voir d'effectuer des op\u00e9rations sur ce contenu :</p> <ul> <li><code>awk</code> traite un document organis\u00e9 par colonnes, avec un s\u00e9parateur   param\u00e9trable</li> <li><code>sed</code> : permet de r\u00e9aliser des rempla\u00e7ements, suppressions, insertions, ...</li> </ul> <p>Je ne vous cacherai pas que l'utilisation des outils <code>awk</code> et <code>sed</code> n'est pas imm\u00e9diate notamment parce que ces outils reposent sur l'utilisation d'expressions r\u00e9guli\u00e8res. Vous trouverez plusieurs exemples d'utlisation de ces commandes dans les TPs.</p>"},{"location":"outils/filtrage/#awk","title":"awk","text":"<p>Afficher la premi\u00e8re colonne</p> <pre><code>$ awk \"{print $1}\" document.txt\n</code></pre> <p>Afficher la troisi\u00e8me colonne en pr\u00e9cisant le s\u00e9parateur ; </p><pre><code>$ awk -F';' '{print $3}' fichier.csv\n</code></pre> <p>Afficher la troisi\u00e8me colonne si la deuxi\u00e8me colonne a une valeur plus petite que 10</p> <pre><code>$ awk -F';' '$2 &lt; 10 {print $3}' fichier.csv\n</code></pre>"},{"location":"outils/filtrage/#sed","title":"sed","text":"<p>Remplacer une cha\u00eene par une autre</p> <p>La commande ci-dessous remplace (<code>s</code>) toutes les occurences (<code>g</code>) cha\u00eene de caract\u00e8res \"avant\" par \"apr\u00e8s\" et retourne le r\u00e9sultat dans la sortie standard</p> <pre><code>$ sed 's/avant/apr\u00e8s/g' fichier.txt\n</code></pre> <p>Pour r\u00e9aliser le changement \"en place\" (inplace), il faudra ajouter l'option <code>-i</code></p> <p>Expressions r\u00e9guli\u00e8res</p> <p>On peut utiliser des expressions r\u00e9guli\u00e8res. Par exemple, pour supprimer tous les commentaires d'un fichier python :</p> <pre><code>$ cat monfichier.py | sed '/^[[:space:]]*#/d'\n</code></pre> <p>La commande pr\u00e9c\u00e9dente cherche toutes les lignes qui commence <code>^</code> ou non par des espaces <code>[[:space:]]*</code>, suivi d'un '#' et supprime <code>d</code> cette ligne. On a utilis\u00e9 des classes de caract\u00e8res, d\u00e9crites dans la documention de sed.</p>"},{"location":"outils/help/","title":"Obtenir de l'aide sur les outils (stackoverflow, nixcraft, man, info, tldr)","text":""},{"location":"outils/help/#obtenir-de-laide-sur-les-outils-stackoverflow-nixcraft-man-info-tldr","title":"Obtenir de l'aide sur les outils (stackoverflow, nixcraft, man, info, tldr)","text":"<p>Pour obtenir de l'aide sur une commande, vous pouvez bien s\u00fbr utiliser un moteur de recherche, explorer des forums comme https://stackoverflow.com, explorer des sites commes celui de nixcraft, mais il existe \u00e9galement quelques commandes :</p> <ul> <li><code>man</code> vous donne acc\u00e8s au manuel sur une commande, </li> <li><code>info</code> a vocation \u00e0 succ\u00e9der \u00e0 <code>man</code> et est une documentation plus compl\u00e8te du   projet GNU. Une petite formation   rapide aux commandes utiles pour naviguer dans ces pages est disponible sur https://zwischenzugs.com/2019/09/04/the-lazy-persons-guide-to-the-info-command/</li> <li><code>tldr</code> (Too Long Don't Read) documente une commande en montrant comment l'utiliser</li> </ul> <p>Par exemple:</p> <pre><code>$ man wget\n\nWGET(1)                                                                                 GNU Wget                                                                                WGET(1)\n\nNAME\n       Wget - The non-interactive network downloader.\n\nSYNOPSIS\n       wget [option]... [URL]...\n\nDESCRIPTION\n       GNU Wget is a free utility for non-interactive download of files from the Web.  It supports HTTP, HTTPS, and FTP protocols, as well as retrieval through HTTP proxies.\n\n       Wget is non-interactive, meaning that it can work in the background, while the user is not logged on.  This allows you to start a retrieval and disconnect from the system,\n       letting Wget finish the work.  By contrast, most of the Web browsers require constant user's presence, which can be a great hindrance when transferring a lot of data.\n\n       Wget can follow links in HTML, XHTML, and CSS pages, to create local versions of remote web sites, fully recreating the directory structure of the original site.  This is\n       sometimes referred to as \"recursive downloading.\"  While doing that, Wget respects the Robot Exclusion Standard (/robots.txt).  Wget can be instructed to convert the links in\n       downloaded files to point at the local files, for offline viewing.\n\n       Wget has been designed for robustness over slow or unstable network connections; if a download fails due to a network problem, it will keep retrying until the whole file has\n       been retrieved.  If the server supports regetting, it will instruct the server to continue the download from where it left off.\n</code></pre> <pre><code>$ info coreutils\n\nNext: Introduction,  Up: (dir)\n\nGNU Coreutils\n*************\n\nThis manual documents version 8.32 of the GNU core utilities, including\nthe standard programs for text and file manipulation.\n\n   Copyright \u00a9 1994-2020 Free Software Foundation, Inc.\n\n     Permission is granted to copy, distribute and/or modify this\n     document under the terms of the GNU Free Documentation License,\n     Version 1.3 or any later version published by the Free Software\n     Foundation; with no Invariant Sections, with no Front-Cover Texts,\n     and with no Back-Cover Texts.  A copy of the license is included in\n     the section entitled \u201cGNU Free Documentation License\u201d.\n\n* Menu:\n\n* Introduction::                 Caveats, overview, and authors\n* Common options::               Common options\n* Output of entire files::       cat tac nl od base32 base64 basenc\n* Formatting file contents::     fmt pr fold\n....\n</code></pre> <pre><code>$ tldr wget\n wget\n\n  Download files from the Web.\n  Supports HTTP, HTTPS, and FTP.\n  More information: https://www.gnu.org/software/wget.\n\n  - Download the contents of a URL to a file (named \"foo\" in this case):\n    wget https://example.com/foo\n\n  - Download the contents of a URL to a file (named \"bar\" in this case):\n    wget --output-document bar https://example.com/foo\n\n  - Download a single web page and all its resources with 3-second intervals between requests (scripts, stylesheets, images, etc.):\n    wget --page-requisites --convert-links --wait 3 https://example.com/somepage.html\n\n  - Download all listed files within a directory and its sub-directories (does not download embedded page elements):\n    wget --mirror --no-parent https://example.com/somepath/\n\n  - Limit the download speed and the number of connection retries:\n    wget --limit-rate 300k --tries 100 https://example.com/somepath/\n\n  - Download a file from an HTTP server using Basic Auth (also works for FTP):\n    wget --user username --password password https://example.com\n\n  - Continue an incomplete download:\n    wget --continue https://example.com\n\n  - Download all URLs stored in a text file to a specific directory:\n    wget --directory-prefix path/to/directory --input-file URLs.txt\n\nFound 1 page with the same name under the platform: windows.\n</code></pre>"},{"location":"outils/historique/","title":"Utiliser l'historique des commandes dans le shell (history, Ctrl+r)","text":""},{"location":"outils/historique/#utiliser-lhistorique-des-commandes-dans-le-shell-history-ctrlr","title":"Utiliser l'historique des commandes dans le shell (history, Ctrl+r)","text":"<p>Le programme GNU history se souvient de toutes les commandes que vous avez tap\u00e9es dans le terminal. Pour voir le contenu de l'historique, </p> <pre><code>$ history\n</code></pre> <p>que vous pouvez bien s\u00fbr combiner avec d'autres commandes. Par exemple, pour rechercher dans l'historique les commandes utilisant <code>git</code></p> <pre><code>$ history | grep git\n</code></pre> <p>Si vous voulez r\u00e9-ex\u00e9cuter une commande, rien de plus simple. Chaque ligne list\u00e9e par <code>history</code> a un index. Il vous suffit alors de taper <code>!</code> suivi du num\u00e9ro de ligne et votre shell va remplacer cette commande par la ligne correspondante.</p> <p>Pour recherche une commande dans l'historique, vous pouvez \u00e9galement faire un \"reverse search\" en tapant les touches <code>Ctrl + r</code>. Votre shell vous propose alors de taper un d\u00e9but de commande et il va compl\u00e9ter avec la commande qui correspond le mieux. Vous pouvez cycler \u00e0 travers les commandes qui correspondent en r\u00e9-appuyant sur <code>Ctrl + r</code>.</p>"},{"location":"outils/images/","title":"Manipulation d'images (convert, mogrify, animate, compose, gimp)","text":""},{"location":"outils/images/#manipulation-dimages-convert-mogrify-animate-compose-gimp","title":"Manipulation d'images (convert, mogrify, animate, compose, gimp)","text":""},{"location":"outils/images/#imagemagick-convert-mogrify-animate-compose","title":"ImageMagick (convert, mogrify, animate, compose)","text":"<p>Si vous devez manipuler des images par exemple pour les convertir d'un format \u00e0 un autre, pour changer leur r\u00e9solution, en extraire une sous-partie, combiner des images, etc. imagemagick est un outil tr\u00e8s pratique. ImageMagick fournit un ensemble d'outils en ligne de commande <code>convert</code>, <code>mogrify</code>, etc. On trouvera des exemples d'utilisation de ces outils sur la page d'ImageMagick. ImageMagick fournit un ensemble d'outils (convert, mogrify, import, ...) dont on trouvera une liste \u00e0 l'adresse http://www.imagemagick.org/script/command-line-tools.php. </p> <p>convert permet entre autres de convertir une image d'un format en un autre, de re-dimensionner une image, d'en extraire une sous-partie, etc. On illustre quelques options de convert ci-dessous (et adapt\u00e9 de la documentation en ligne d'ImageMagick):</p> <p>Example</p> <p>Utilisation de convert (ImageMagick)</p> <p>A partir de l'image gnu.svg de Aur\u00e9lio A. Heckert disponible sur la page https://www.gnu.org/graphics/heckert_gnu.html</p> <p></p> <pre><code>$ convert gnu.svg -resize 20% gnu.png\n</code></pre> <p></p> <pre><code>$ convert -crop 75x50+20+20 +repage gnu.png gnu-eye.png\n</code></pre> <p></p> <p>mogrify fonctionne comme convert mais peut s'appliquer sur un ensemble d'images. Cet outil est donc tr\u00e8s pratique pour appliquer les m\u00eames traitements \u00e0 une grande collection d'images. On peut par exemple redimensionner et convertir un ensemble d'images JPEG en une ligne </p> <pre><code>$ mogrify -crop 75x50+20+20 +repage -format png *.jpg\n</code></pre> <p>Les dernier outil qu'on mentionne sont animate qui permet d'animer une s\u00e9quence d'images<sup>2</sup> et compose qui permet d'assembler plusieurs images en une seule image.</p> <p>Il existe \u00e9galement une variante, bas\u00e9e originalement sur une ancienne version d'imagemagick et qui \u00e9volue depuis ind\u00e9pendemment, qui s'appelle graphicsmagick et qui semble avoir de meilleures performances qu'imagemagick. </p> <p>imagemagick et graphicsmagick ont des wrappers qui permettent d'utiliser ces outils depuis diff\u00e9rentes langages de programmation.</p>"},{"location":"outils/images/#gnu-image-manipulation-program-gimp","title":"GNU Image Manipulation Program (GIMP)","text":"<p>On ne peut pas parler d'outils libres de traitement d'image sans mentionner l'excellent Gimp qui vous permet de retoucher des photos, appliquer des filtres, convertir l'image d'un format en un autre, etc... </p> <p>Si vous lancez gimp, l'interface graphique se lancera par d\u00e9faut. Mais vous pouvez \u00e9galement appeler gimp en ligne de commande, pour par exemple, appliquer un filtre \u00e0 une image<sup>1</sup>.</p> <p>Ci-dessous un exemple de GIMP chargeant une image, une tr\u00e8s grosse image :</p> <p></p> <ol> <li> <p>On peut m\u00eame imaginer que ce ne soit qu'un \u00e9l\u00e9ment d'une cha\u00eene qui capture des images, les traitent et les assemble pour former une vid\u00e9o, le tout \u00e0 l'aide d'un Makefile.\u00a0\u21a9</p> </li> <li> <p>on verra dans la partie video comment fabriquer une vid\u00e9o \u00e0 partir d'une s\u00e9rie d'images.\u00a0\u21a9</p> </li> </ol>"},{"location":"outils/interface/","title":"Interface utilisateur (zenity, whiptail)","text":""},{"location":"outils/interface/#interface-utilisateur-zenity-whiptail","title":"Interface utilisateur (zenity, whiptail)","text":"<p>On a parfois besoin d'agr\u00e9menter un script shell avec quelques interactions avec l'utilisateur, par exemple pour lui afficher une bo\u00eete de dialogue, lui poser des questions, etc. </p> <p>Si vous voulez cr\u00e9er des interfaces utilisateur, vous avez plusieurs possibilit\u00e9s qui vont d\u00e9pendre du langage dans lequel vous codez :</p> <ul> <li>zenity, whiptail sont disponibles en python mais \u00e9galement en shell   script !</li> <li>ncurse , imgui</li> <li>gtk, wx, tk et Qt sont \u00e9galement disponibles dans plein de   langages</li> </ul> <p>Ici, on ne va offrir qu'un aper\u00e7u concernant zenity/whiptail pour se focaliser exclusivement sur des outils permettant d'interagir avec l'utilisateur depuis un script shell (bash, zsh, ...).</p> <p>Zenity est un utilitaire en ligne de commande qui permet de cr\u00e9er des boites de dialogue. Ces boites de dialogue peuvent contenir des calendriers, s\u00e9lecteur de fichier, listes, formulaires, messages, zones de texte, mot de passe, etc... Le principal int\u00e9r\u00eat de Zenity est qu'il est alors tr\u00e8s facile de g\u00e9n\u00e9rer de petites interfaces graphiques, par exemple pour demander une information ou informer de l'avancement d'une t\u00e2che, sans avoir \u00e0 passer par toute une moulinette de programme C++, Java, ou autre. Un exemple d'utilisation de Zenity est pr\u00e9sent\u00e9 dans la section sur les outils de capture pour saisir un nom de fichier dans lequel sauvegarder une capture d'\u00e9cran. </p> <p>Ci-dessous, quelques exemples que vous trouverez sur le site web de Zenity. Zenity produit deux sorties\u00a0: un code de sortie stock\u00e9 dans la variable <code>$?</code> dont la valeur est \\(0\\) si tout va bien et \\(1, -1\\) ou \\(5\\) dans des cas d'erreur<sup>1</sup>. Ce qui est int\u00e9ressant, c'est que la commande elle-m\u00eame retourne un r\u00e9sultat, par exemple le texte saisi dans une boite de dialogue, le lien vers le fichier s\u00e9lectionn\u00e9 dans un s\u00e9lecteur de fichier, etc.\\</p> <p>Pour afficher une simple zone de saisie:</p> <pre><code>$ zenity --entry --title=\"S\u00e9lection de fichier\" \\\n       --text=\"Saisissez un nom de fichier:\" \\\n       --entry-text \"example.png\" \n</code></pre> <p></p> <p>Pour s\u00e9lectionner un ou plusieurs fichiers, le r\u00e9sultat \u00e9tant une liste des fichiers s\u00e9lectionn\u00e9s s\u00e9par\u00e9s par le s\u00e9parateur pr\u00e9cis\u00e9 (<code>|</code> pour l'exemple):</p> <pre><code>$ zenity --file-selection --title=\"S\u00e9lection de fichier\" --separator=\"|\" --multiple\n</code></pre> <p>On peut faire de m\u00eame avec whiptail. Whiptail est l'outil que l'on va plut\u00f4t trouver classiquement sur les distributions d\u00e9riv\u00e9es de debian. C'est l'outil utilis\u00e9 pour cr\u00e9er l'interface graphique de raspiconfig, l'utilitaire pour configurer un raspberry. Pour le coup, vous trouverez plusieurs utilisations de whiptail dans le code source de raspi-config.</p> <p>Afficher un message</p> <pre><code>$ whiptail --msgbox \"Incroyable cet outil ! \" 10 30\n</code></pre> <p>Poser une question oui/non </p><pre><code>$ whiptail --yesno \"\u00cates-vous vraiment vraiment s\u00fbr de vouloir poursuivre ? \" 20 60 2 --yes-button \"Carr\u00e9ment\" --no-button \"Piti\u00e9 non\"\n</code></pre> <p>Menu</p> <pre><code>whiptail --title \"Menu example\" --menu \"Choose an option\" 25 78 16 \\\n\"&lt;-- Back\" \"Return to the main menu.\" \\\n\"Add User\" \"Add a user to the system.\" \\\n\"Modify User\" \"Modify an existing user.\" \\\n\"List Users\" \"List all users on the system.\" \\\n\"Add Group\" \"Add a user group to the system.\" \\\n\"Modify Group\" \"Modify a group and its list of members.\" \\\n\"List Groups\" \"List all groups on the system.\"\n</code></pre> <p></p> <p>Ce dernier exemple est tir\u00e9 de la page wikibooks sur whiptail sur laquelle vous trouverez plein d'autres exemples. Allez voir https://en.wikibooks.org/wiki/Bash_Shell_Scripting/Whiptail.</p> <ol> <li> <p>Regardez la page de Zenity pour la signification de ces codes d'erreur. https://help.gnome.org/users/zenity/stable/usage.html.en \u21a9</p> </li> </ol>"},{"location":"outils/num/","title":"Calculs num\u00e9riques et symboliques (octave, scilab, numpy, pandas, scipy, sympy, matplotlib, seaborn)","text":""},{"location":"outils/num/#calculs-numeriques-et-symboliques-octave-scilab-numpy-pandas-scipy-sympy-matplotlib-seaborn","title":"Calculs num\u00e9riques et symboliques (octave, scilab, numpy, pandas, scipy, sympy, matplotlib, seaborn)","text":""},{"location":"outils/num/#alternatives-a-matlab-octave-scilab-sagemath","title":"Alternatives \u00e0 Matlab (Octave, scilab, SageMath)","text":"<p>Plusieurs logiciels libres existent en alternatives \u00e0 Matlab. Quelques-uns sont list\u00e9s ci-dessous :</p> <ul> <li>GNU Octave, projet GNU </li> <li>scilab, port\u00e9 par Dassault Syst\u00e8mes</li> <li>SageMath</li> </ul> <p>Octave utilise le m\u00eame langage que Matlab de telle mani\u00e8re qu'un programme \u00e9crit en Matlab devrait \u00eatre ex\u00e9cutable avec Octave. Il est extensible avec des packages.</p> <p>Scilab est un outil de calcul port\u00e9 par Dassault Syst\u00e8mes. Il peut \u00e9galement \u00eatre \u00e9tendu avec des bo\u00eetes \u00e0 outils installables avec atoms, par exemple pour la m\u00e9canisque spatiale par le CNES.</p> <p>SageMath est un outil pour les math\u00e9matiques, pour le calcul num\u00e9rique, le calcul symbolique, le trac\u00e9, etc... On trouvera plus d'informations dans le livre en Fran\u00e7ais Calcul math\u00e9matique avec Sage.</p>"},{"location":"outils/num/#outils-python-du-calcul-scientifique","title":"Outils python du calcul scientifique","text":"<p>Dans l'\u00e9cosyst\u00e8me python, plusieurs librairies pour le calcul scientifique sont incontournables :</p> <ul> <li>numpy : calcul num\u00e9rique en g\u00e9n\u00e9ral</li> <li>scipy : traitement du signal</li> <li>sympy : calcul symbolique</li> <li>matplotlib : trac\u00e9</li> <li>seaborn : trac\u00e9.</li> </ul>"},{"location":"outils/num/#calcul-numerique-numpy-scipy","title":"Calcul num\u00e9rique (numpy, scipy)","text":"<p>La librairie numpy est un incontournable pour le calcul num\u00e9rique en python. Avec un coeur \u00e9crit en C++ et un wrapper python, elle est \u00e0 la foi efficace et confortable d'utilisation. Vous trouverez des guides sur la page https://numpy.org/learn/ pour prendre en main numpy. Il existe \u00e9galement des livres en acc\u00e8s libre comme From python to numpy.</p> <p>Pour l'utiliser :</p> <pre><code>$ python3 -m pip install numpy\n</code></pre>"},{"location":"outils/num/#traitement-des-images-scikit-image-opencv","title":"Traitement des images (scikit-image, opencv)","text":"<p>Pour le traitement des images, des librairies standards comme OpenCV ou scikit-image vous offrent un certain nombre d'algorithmes :</p> <ul> <li>scikit-image</li> <li>opencv</li> </ul> <p>La librairie OpenCV en particulier est en partculier tr\u00e8s d\u00e9velopp\u00e9e avec des algorithmes de calibration de cam\u00e9ra, d\u00e9tection de ligne (transform\u00e9e de Hough, op\u00e9rateurs morphologiques, ...) . Pour  l'utiliser en python, vous pouvez l'installer avec pip :</p> <pre><code>$ python3 -m pip install opencv-python-headless\n</code></pre>"},{"location":"outils/num/#calcul-symbolique-sympy","title":"Calcul symbolique (sympy)","text":"<p>sympy est une librairie python qui va vous permettre de manipuler symboliquement des expressions math\u00e9matiques. Pour l'installer :</p> <pre><code>$ python3 -m pip install sympy\n</code></pre> <p>Par exemple, consid\u00e9rons deux r\u00e9f\u00e9rentiels A et B, l'orientation du r\u00e9f\u00e9rentiel B dans le r\u00e9f\u00e9rentiel A \u00e9tant donn\u00e9e par le quaternion (\\(q_x, q_y, q_z, q_w)\\). On peut calculer symboliquement les coordonn\u00e9es, dans le r\u00e9f\u00e9rentiel A, du vecteur \\((1, 0, 0)\\) dans le r\u00e9f\u00e9rentiel B, projet\u00e9 sur le plan x-y du r\u00e9f\u00e9rentiel A \u00e0 l'aide de sympy :</p> <pre><code>import sympy\nfrom sympy.algebras.quaternion import Quaternion\nfrom sympy import symbols\nfrom sympy import conjugate\n\nqx = symbols('qx')\nqy = symbols('qy')\nqz = symbols('qz')\nqw = symbols('qw')\n\nq1 = Quaternion(qw, qx, qy, qz, real_field=True)\n\n# Vecteur x dans le r\u00e9f\u00e9rentiel B\nv = Quaternion(0, 1, 0, 0)\n\nres = q1 * v * conjugate(q1)\nprint(f\"Apr\u00e8s rotation : {res}\"))\n\nhorizontal_res = Quaternion(res.a, res.b, res.c, 0.0).normalize().simplify()\nprint(f\"Vecteur projet\u00e9 normalis\u00e9 : {horizontal_res}\")\n</code></pre>"},{"location":"outils/num/#trace-matplotlib-seaborn","title":"Trac\u00e9 (matplotlib, seaborn)","text":"<p>Pour trac\u00e9 des donn\u00e9es avec un programme python, vous pouvez utiliser les librairies matplotlib et seaborn.</p> <p> </p> <p>Pour apprendre \u00e0 prendre en main ces libraiires, il existe des tutoriels pour matplotlib et des tutoriels pour seaborn.</p>"},{"location":"outils/num/#machine-learning-scikit-learn-pandas-pytorch-tensorflow","title":"Machine learning (scikit-learn, pandas, pytorch, tensorflow)","text":"<p>Les librairies pour l'apprentissage automatique sont nombreuses. On atteint probablement les limites de l'objectif de ce site web en ne pouvant pas lister toutes les librairies pertinentes pour ce sujet. Mais disons qu'on peut donner quelques pointeurs :</p> <ul> <li>scikit-learn : proposent des impl\u00e9mentations de   beaucoup d'algorithmes d'apprentissage automatique (arbres, svm, r\u00e9seaux de   neurones, k-means, ...), de datasets, etc..</li> <li>pandas : librairie particuli\u00e8rement efficace pour   traiter de grandes masses de donn\u00e9es (en \"local\", vs hadoop/spark pour des traitements distribu\u00e9s)</li> <li>pytorch et  tensorflow : pour   le deep learning</li> <li>jax qui est apparu dans le sillage des   librairies de deeplearning, que l'on pourrait d\u00e9finir comme un numpy qui peut   ex\u00e9cuter ses calculs sur CPU/GPU/TPU, et avec la diff\u00e9rentiabilit\u00e9 des op\u00e9rations</li> </ul> <p> </p>"},{"location":"outils/pdf/","title":"Manipulation de documents PDF (pdftk, xournalpp)","text":""},{"location":"outils/pdf/#manipulation-de-documents-pdf-pdftk-xournalpp","title":"Manipulation de documents PDF (pdftk, xournalpp)","text":""},{"location":"outils/pdf/#extraction-insertion-concatenation-rotations-des-pages-pdftk","title":"Extraction, insertion, concat\u00e9nation, rotations des pages (pdftk)","text":"<p>Si vous devez fusionner ou s\u00e9parer des PDFs, tourner des pages, etc.  <code>pdftk</code> est l'outil qu'il vous faut :</p> <p>Extraire les \\(3\\) premi\u00e8res pages d'un pdf </p><pre><code>$ pdftk fichier.pdf cat -3 output sortie.pdf\n</code></pre> <p>Fusionner \\(2\\) fichiers PDF</p> <pre><code>$ pdftk A=fichier1.pdf B=fichier2.pdf cat A3-4 B5-6 output sortie.pdf\n</code></pre> <p>Pour plus d'exemples :</p> <pre><code>$ tldr pdftk\n</code></pre>"},{"location":"outils/pdf/#annotation-dun-document-pdf-xournal","title":"Annotation d'un document PDF (xournal++)","text":"<p>Si vous avez d'annoter un document PDF (e.g. un rapport, un document \u00e0 signer), le programme xournal++ est id\u00e9al. </p> <p>Vous pouvez l'utiliser pour ajouter des annotations manuscrites, tapuscrites, ins\u00e9rer des images, etc...</p> <p></p>"},{"location":"outils/rapport/","title":"Ecrire un rapport, des slides, un poster avec LaTeX (latexmk)","text":""},{"location":"outils/rapport/#ecrire-un-rapport-des-slides-un-poster-avec-latex-latexmk","title":"Ecrire un rapport, des slides, un poster avec LaTeX (latexmk)","text":"<p>Danger</p> <p>wip</p> <ul> <li>overleaf</li> <li>texlive</li> <li>latexmk</li> <li>latex templates: https://www.latextemplates.com/</li> <li>latex beamer poster https://github.com/deselaers/latex-beamerposter</li> </ul>"},{"location":"outils/recherche/","title":"Recherche de fichier ou de contenu (grep, rg, find, locate)","text":""},{"location":"outils/recherche/#recherche-de-fichier-ou-de-contenu-grep-rg-find-locate","title":"Recherche de fichier ou de contenu (grep, rg, find, locate)","text":"<p>Nous allons voir plusieurs outils pour rechercher des fichiers ou du contenu dans des fichiers :</p> <ul> <li><code>grep</code> : recherche de texte dans les fichiers,</li> <li><code>rg</code> (ripgrep) : une version tr\u00e8s   rapide de grep,</li> <li><code>find</code> : recherche de fichiers selon des crit\u00e8res vari\u00e9s avec possibilit\u00e9   d'ex\u00e9cuter des commandes sur ces fichiers,</li> <li><code>locate</code> : recherche rapide de fichiers gr\u00e2ce \u00e0 une base de donn\u00e9es.</li> </ul>"},{"location":"outils/recherche/#grep-rg-rechercher-du-texte-dans-les-fichiers","title":"<code>grep</code>, <code>rg</code> : Rechercher du texte dans les fichiers","text":"<p>La commande GNU <code>grep</code> est install\u00e9 par d\u00e9faut sur votre syst\u00e8me. Elle permet de recherche du texte dans des fichiers.</p> <p>Par exemple, la commande ci-dessous va rechercher \"Error\" dans le fichier <code>/var/log/syslog</code>.</p> <pre><code>$ grep \"Error\" /var/log/syslog\n</code></pre> <p>Il est \u00e9galement possible d'effectuer une rechercher r\u00e9cursive. La commande ci-dessous recherche r\u00e9cursivement le mot \"Error\" dans tout les fichiers de tout les sous-r\u00e9pertoires de <code>/var/log</code>.</p> <pre><code>$ grep -r \"Error\" /var/log\n</code></pre> <p>Une commande tr\u00e8s pratique pour rechercher un motif est la commande <code>grep -nri</code> avec les options:</p> <ul> <li><code>-n</code> : pr\u00e9fixe le mot trouv\u00e9 du num\u00e9ro de ligne dans le fichier dans lequel le   mot est trouv\u00e9</li> <li><code>-r</code> : recherche r\u00e9cursive</li> <li><code>-i</code> : recherche insensible \u00e0 la casse (ind\u00e9pendemment des   minuscules/majuscules)</li> </ul> <p>La commande <code>rg</code> (ripgrep) est un <code>grep</code> plus rapide mais qui n'est pas install\u00e9 par d\u00e9faut.</p>"},{"location":"outils/recherche/#find-et-locate-rechercher-un-fichier","title":"<code>find</code> et <code>locate</code> : Rechercher un fichier","text":"<p><code>find</code> et <code>locate</code> sont deux utilitaires en ligne de commande qui vous permettent de rechercher des fichiers sur votre disque dur. <code>locate</code> utilise une base de donn\u00e9es (sous Fedora, cette base de donn\u00e9es est stock\u00e9e dans le fichier <code>/var/lib/mlocate/mlocate.db</code>) des fichiers stock\u00e9s sur le disque, qu'il va consulter lorsque vous faites une requ\u00eate locate. Cette base de donn\u00e9es n'est pas forc\u00e9ment mise \u00e0 jour automatiquement et il peut \u00eatre n\u00e9cessaire de lancer la commande <code>updatedb</code>, en root, pour effectuer cette mise \u00e0 jour. <code>find</code> quand \u00e0 elle, parcours un r\u00e9pertoire cible que vous lui pr\u00e9cisez \u00e0 la recherche de votre fichier. Utiliser <code>locate</code> est plus rapide que <code>find</code> mais il faut bien s'assurer que la base est \u00e0 jour pour que <code>locate</code> vous retourne vos r\u00e9sultats. Ces programmes vous permettent de rechercher des fichiers dans un ou plusieurs r\u00e9pertoires qui :</p> <ul> <li>ont des noms contenant un certain texte ou v\u00e9rifiant une expression r\u00e9guli\u00e8re</li> <li>contiennent du texte v\u00e9rifiant une certaine expression r\u00e9guli\u00e8re</li> <li>sont des liens vers d'autres fichiers</li> <li>ont \u00e9t\u00e9 utilis\u00e9 pendant une certaine p\u00e9riode, font une certaine taille</li> <li>sont d'un certain type, appartiennent \u00e0 un utilisateur ou groupe, ont des droits d'acc\u00e8s particuliers, </li> <li>se trouvent \u00e0 une certaine distance du r\u00e9pertoire d'o{` u} la recherche est initi\u00e9e</li> </ul> <p>Vous pouvez rechercher des fichiers selon les crit\u00e8res ci-dessus mais \u00e9galement les voir, \u00e9diter, ajouter \u00e0 une archive, renommer, changer les permissions, utilisateur, etc.. On trouvera beaucoup de d\u00e9tails sur l'utilisation des outils <code>find</code> et <code>locate</code> sur la page findutils du projet GNU http://www.gnu.org/software/findutils/manual/html_mono/find.html.</p> <p>On donne ci-dessous quelques exemples typiques d'utilisation.</p> <p>Utilisation de locate</p> <p>Si la base de donn\u00e9es de locate n'est pas \u00e0 jour, il faut lancer </p><pre><code>$ sudo updatedb\n</code></pre> <p>Pour faire une requ\u00eate simple sur un nom de fichier, on utilise alors locate: </p><pre><code>$ locate toto.titi\n</code></pre> <p>On peut aussi demander \u00e0 updatedb d'indexer un r\u00e9pertoire et sp\u00e9cifier le fichier de base de donn\u00e9es de sortie:</p> <pre><code>$ updatedb -U /chemin/a/indexer -o /chemin/vers/mabase.db -l 0\n</code></pre> <p>On utilisera alors locate en lui pr\u00e9cisant la base de donn\u00e9es \u00e0 utiliser</p> <pre><code>$ locate -d /chemin/vers/mabase.db toto.titi\n</code></pre> <p>Si vous avez besoin de rechercher un document dans un r\u00e9pertoire, il est plus facile d'utiliser la commande <code>find</code>.</p> <p>Utilisation de find</p> <p>Pour rechercher un fichier dont vous connaissez le nom dans un r\u00e9pertoire donn\u00e9 (e.g. votre home):</p> <pre><code>$ find ~ -iname monfichier.txt\n</code></pre> <p>Pour rechercher tous les fichiers PDF d'au moins 4 Mo: </p> <pre><code>$  find ~ -name '*.pdf' -size +4M\n</code></pre> <p>La requ\u00eate peut \u00e9galement \u00eatre construite \u00e0 l'aide d'une expression r\u00e9guli\u00e8re. Par exemple, pour chercher tous les fichiers Makefile ou makefile sur son home, on utilisera (on trouvera plus de   d\u00e9tails sur les expressions r\u00e9guli\u00e8res \u00e0 l'adresse http://www.gnu.org/software/findutils/manual/html_mono/find.html#Regular-Expressions) :</p> <pre><code>$ find ~ -regex '.*/[Mm]akefile'\n</code></pre> <p>On a montr\u00e9 ici uniquement la fa\u00e7on d'appeler find pour rechercher des fichiers mais on peut \u00e9galement ex\u00e9cuter des commandes sur les fichiers list\u00e9s, avec l'option <code>-exec</code>. Par exemple : </p> <p>Trouver tout les PDFs d'au moins 4M dans son home et obtenir leur taille:</p> <pre><code>$  find ~ -name '*.pdf' -size +4M -exec du -sh \\{} \\;\n</code></pre> <p>Trouver des makefiles dans lesquels on a utilis\u00e9 wildcard</p> <pre><code>$ find ~ -regex '.*/[Mm]akefile' -exec grep '$(wildcard' \\{} \\;\n</code></pre> <p>Une autre mani\u00e8re de proc\u00e9der pour appliquer une commande sur tous les fichiers trouv\u00e9s par <code>find</code> est d'envoyer la sortie de standard <code>find</code> dans l'entr\u00e9e standard de <code>xargs</code>. Par exemple, pour copier tout les fichiers avec l'extension <code>.tex</code> d'une arborescence vers une autre :</p> <p>Trouver et copier des fichiers</p> <pre><code>$  find /path/to/A -name '*.tex' | xargs -I{} cp {} /path/to/B \n</code></pre> <p>On utilise ici <code>-I{}</code> pour capturer ce que re\u00e7oit en entr\u00e9e la commande <code>xargs</code> et le placer dans la cha\u00eene de caract\u00e8re <code>{}</code>. On peut alors utiliser dans la suite de la commande le symbole de capture <code>{}</code>, tr\u00e8s pratique quand il faut r\u00e9organiser les arguments de la commande \u00e0 ex\u00e9cuter. Par d\u00e9faut, <code>xargs</code> va placer ce qu'il re\u00e7oit en entr\u00e9e \u00e0 la fin de la commande que vous lui donnez.</p>"},{"location":"outils/remote/","title":"Interaction avec une machine distante (ssh, scp, rsync, sshfs, screen, byobu)","text":""},{"location":"outils/remote/#interaction-avec-une-machine-distante-ssh-scp-rsync-sshfs-screen-byobu","title":"Interaction avec une machine distante (ssh, scp, rsync, sshfs, screen, byobu)","text":"<p>Vous allez tr\u00e8s certainement \u00eatre confront\u00e9s \u00e0 interagir avec des machines \u00e0 distance, parfois m\u00eame des serveurs qui ne disposent pas de clavier/souris. Les commandes pr\u00e9sent\u00e9es dans ce chapitre vous montrent comment :</p> <ul> <li>vous connecter \u00e0 distance \u00e0 une machine voir, ex\u00e9cuter des commandes \u00e0   distance (<code>ssh</code>)</li> <li>transf\u00e9rer des fichiers vers ou depuis une machine distante (<code>scp</code>, <code>rsync</code>)</li> <li>\"monter\" un volume distant pour y acc\u00e9der localement (<code>sshfs</code>)</li> </ul>"},{"location":"outils/remote/#se-connecter-a-une-machine-distante-ssh","title":"Se connecter \u00e0 une machine distante (ssh)","text":"<p>Quand on a besoin de se connecter \u00e0 une machine distante, si celle-ci est \u00e9quip\u00e9e d'un serveur ssh, on peut utiliser la commande <code>ssh</code> en ligne de commande  :</p> <pre><code>$ ssh monlogin@ip_de_la_machine\n</code></pre> <p>et votre terminal se retrouve connect\u00e9 au serveur dont l'adresse IP est <code>ip_de_la_machine</code>. Si jamais le serveur ssh de la machine distante n'\u00e9coute pas sur le port standard \\(22\\), on peut l'indiquer par l'option <code>-p port</code>.</p> <p>Il est plut\u00f4t confortable de se d\u00e9finir des alias ssh. Ils sont d\u00e9finis dans le fichier <code>~/.ssh/config</code>.</p> <p>Par exemple, si vous mettez le contenu ci-dessous :</p> <pre><code>Host raspi\n    Hostname 82.99.234.239\n    User monlogin\n    Port 2222\n</code></pre> <p>Il vous permet de lancer la commande <code>ssh raspi</code> qui correspond \u00e0 <code>ssh monlogin@82.99.234.239 -p 2222</code>.</p> <p>De temps en temps, on a besoin de passer par une machine rebond (e.g. firewall) avant d'arriver sur la machine cible. On peut facilement le d\u00e9finir en ligne de commande bien s\u00fbr mais c'est plus confortable de le d\u00e9finir dans son <code>~/.ssh/config</code>. Par exemple si on veut atteindre <code>host1</code> en rebondissant sur la machine <code>proxy1.domain.com</code></p> <pre><code>Host host1\n    Hostname host1\n    User monlogin_sur_host1\n    ProxyCommand ssh proxy1 -W %h:%p\n\nHost proxy1\n    Hostname proxy1.domain.com\n    User monlogin_sur_proxy1\n</code></pre> <p>et vous pourrez alors simplement lancer la commande <code>ssh host1</code> depuis votre machine locale ! </p>"},{"location":"outils/remote/#executer-des-commandes-a-distance-ssh","title":"Ex\u00e9cuter des commandes \u00e0 distance (ssh)","text":"<p>Avec la commande <code>ssh</code> vous pouvez vous connecter sur un h\u00f4te distant, mais vous pouvez aussi directement ex\u00e9cuter une commande sur cet h\u00f4te. Par exemple :</p> <pre><code>$ ssh host1 \"df -h\"\n</code></pre>"},{"location":"outils/remote/#transferer-des-fichiers-ou-depuis-une-machine-distante-scp-rsync","title":"Transf\u00e9rer des fichiers ou depuis une machine distante (scp, rsync)","text":"<p>Si vous voulez copier des fichiers/r\u00e9pertoires de votre machine locale \u00e0 une machine distante l'inverse, il existe plusieurs commandes comme <code>scp</code> ou <code>rsync</code>. La commande <code>rsync</code> ne va copier que ce qui est n\u00e9cessaire, en comparant l'arborescence locale et distante lors de la copie d'un r\u00e9pertoire.</p> <p>Par exemple, quelques appels :</p> <p>Copier un fichier local sur une machine distante</p> <pre><code>$ scp /chemin/vers/rep/local/fichier monlogin@monhote:/chemin/vers/rep/\n$ rsync -ah --info=progress2 /chemin/vers/rep/fichier monlogin@monhote:/chemin/vers/rep/\n</code></pre> <p>Copier un r\u00e9pertoire local sur une machine distante</p> <pre><code>$ scp -r /chemin/vers/rep/local monlogin@monhote:/chemin/vers/rep/\n$ rsync -ah --info=progress2 /chemin/vers/rep/local/ monlogin@monhote:/chemin/vers/rep/dist\n</code></pre> <p>Voir aussi How to copy and transfer files remotely on Linux using scp and rsync</p>"},{"location":"outils/remote/#monter-un-volume-distant-mount-sshfs","title":"Monter un volume distant (mount, sshfs)","text":"<p>Si vous voulez interagir avec un r\u00e9pertoire sur une machine distant, il est possible de le \"monter\" localement et de voir ce r\u00e9pertoire comme si c'\u00e9tait un espace disque sur votre machine locale.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, il existe plusieurs mani\u00e8res de monter des volumes, qui d\u00e9pendent des protocoles d'\u00e9change avec le serveur qui contient les donn\u00e9es. La commande <code>mount</code> par exemple, g\u00e8re les protocoles nfs, cifs, etc.</p> <pre><code>$ mkdir /point/de/montage/local\n$ mount --types filesystem_type monlogin@monhote:/chemin/distant /point/de/montage/local\n</code></pre> <p>Si le serveur distant est \u00e9quip\u00e9 d'un serveur ssh, vous pouvez \u00e9galement utiliser un montage par ssh avec la commande <code>sshfs</code> :</p> <pre><code>$ mkdir /point/de/montage/local\n$ sshfs monlogin@monhote:/chemin/distant /point/de/montage/locak\n</code></pre> <p>Voir aussi How To Mount a Remote Directory With SSHFS on a Linux</p>"},{"location":"outils/remote/#authentification-alternative-au-mot-de-passe-par-cle-ssh-ssh-keygen-ssh-copy-id","title":"Authentification alternative au mot de passe, par cl\u00e9 ssh (ssh-keygen, ssh-copy-id)","text":"<p>Il existe plusieurs m\u00e9canismes gr\u00e2ce auxquels un h\u00f4te distant peut vous identifier :</p> <ul> <li>par mot de passe que seul vous et l'h\u00f4te distant connaissent</li> <li>par cl\u00e9 ssh, chiffrement dit \u00e0 cl\u00e9 sym\u00e9trique dans lequel vous et l'h\u00f4te   poss\u00e9daient chacun un bout de cl\u00e9</li> </ul> <p>Et certainement d'autres. Maintenant, \u00e9galement compl\u00e9t\u00e9 par des m\u00e9canismes de 2FA (two-factor authentication) par lequel un utilisateur doit apporter une preuve compl\u00e9mentaire de son identit\u00e9 par un code partag\u00e9 par exemple.</p> <p>En ce qui concerne l'authentification par cl\u00e9 ssh, le principe est de g\u00e9n\u00e9rer une paire de cl\u00e9, dites \"cl\u00e9 publique\", \"cl\u00e9 priv\u00e9e\". Ces cl\u00e9s sont sym\u00e9triques et, en th\u00e9orie, interchangeables. On les appelle \"public\", \"priv\u00e9\" et elles poss\u00e8dent des extensions et contenus diff\u00e9rents pour \u00e9viter que l'utilisateur ne partage par erreur parfois la cl\u00e9 publique, parfois la cl\u00e9 priv\u00e9e\u202f; Si quelqu'un poss\u00e8de les deux morceaux de la cl\u00e9 (plus \u00e9ventuellement un mot de passe), il peut se faire passer pour vous. </p> <p>Pour g\u00e9n\u00e9rer une paire de cl\u00e9 :</p> <pre><code>$ ssh-keygen\n</code></pre> <p>Plusieurs options peuvent \u00eatre chang\u00e9es comme le type de cl\u00e9, la longueur de la cl\u00e9, etc.  Cette commande va produire \\(2\\) fichiers, l'un pour la cl\u00e9 publique, l'autre pour la cl\u00e9 priv\u00e9e. Pour une cl\u00e9 de type RSA, ces fichiers seront <code>~/.ssh/id_rsa</code> pour la cl\u00e9 priv\u00e9e et <code>~/.ssh/id_rsa.pub</code> pour la cl\u00e9 publique.</p> <p>La cl\u00e9 priv\u00e9e doit rester ... priv\u00e9e. La cl\u00e9 publique peut \u00eatre partag\u00e9e sans souci avec tous les serveurs sur lesquels vous avez besoin de vous authentifier : serveur ssh distant, instances gitlab, github.com, etc.</p> <p>Pour copier une cl\u00e9 sur un serveur distant, il existe la commande <code>ssh-copy-id</code></p> <pre><code>$ ssh-copy-id monlogin@monhote\n</code></pre> <p>Vous pouvez alors lancer la commande <code>ssh</code> qui devrait utiliser votre cl\u00e9 ssh pour vous authentifier :</p> <pre><code>$ ssh monlogin@monhote\n</code></pre> <p>Lors de l'utilisation de votre cl\u00e9 SSH, un \"agent ssh\", un programme qui tourne en local sur votre machine, va d\u00e9verrouiller votre cl\u00e9 en vous demandant son mot de passe avant de l'utiliser\u202f; Pour les connexions ult\u00e9rieures, cet agent ssh se souviendra des identit\u00e9s d\u00e9verrouill\u00e9es.</p> <p>En pratique, la commande <code>ssh-copy-id</code> va simplement copier le contenu de votre cl\u00e9 publique dans le fichier <code>~/.ssh/authorized_keys</code> du serveur. N'h\u00e9sitez pas \u00e0 aller inspecter le contenu de ce fichier pour voir les cl\u00e9s qui y sont d\u00e9j\u00e0 renseign\u00e9es :</p> <pre><code>$ ssh monlogin@monhote \"cat ~/.ssh/authorized_keys\"\n</code></pre> <p>Si vous utilisez des cl\u00e9s ssh pour vous connecter sur des machines distantes, \u00e9ventuellement en utilisant des rebonds, il peut \u00eatre pratique de partager \"l'agent ssh\". On peut alors l'indiquer dans son fichier <code>~/.ssh/config</code> avec l'option <code>ForwardAgent</code> :</p> <pre><code>Host raspi\n    Hostname ww.xx.yy.zz\n    User monlogin\n    ForwardAgent yes\n</code></pre> <p>Voir aussi How To Set up SSH Keys on a Linux / Unix System</p>"},{"location":"outils/remote/#multiplexeur-de-terminal-screen-tmux-byobu","title":"Multiplexeur de terminal (screen, tmux, byobu)","text":"<p>Un multiplexeur de terminal vous permet de :</p> <ul> <li>virtuellement disposer de plusieurs fen\u00eatres de terminal dans une m\u00eame fen\u00eatre. Cela s'av\u00e8re extr\u00eamement pratique en particulier lorsque vous interagissez avec une machine \u00e0 distance,</li> <li>laisser un processus vivant, m\u00eame si on est d\u00e9connect\u00e9 d'une machine distante.</li> </ul> <p>Il existe plusieurs programmes pour \u00e7a, comme <code>screen</code>, <code>tmux</code> ou encore <code>byobu</code>.</p> <p>La commande <code>screen</code> est utile lorsque vous vous connectez par ssh sur une machine distante et que vous souhaitez conserver une session active m\u00eame apr\u00e8s vous \u00eatre d\u00e9connect\u00e9 de l'h\u00f4te. </p> <pre><code>$ ssh monlogin@monhote\n\n# Cr\u00e9er une nouvelle session\n$ screen\n\n# Lancer des commandes\n....\n\n# Se d\u00e9tacher de la session\n&lt;Ctrl+A&gt; &lt;d&gt;\n</code></pre> <p>La s\u00e9quence de touches   permet de vous \"d\u00e9tacher\" de la session. Vous pouvez alors fermer la session ssh, la session screen reste active sur l'h\u00f4te. Plus tard, pour vous r\u00e9-attacher \u00e0 la session :</p> <pre><code># Lister les sessions actives pour identifier\n# le nom de la session \u00e0 laquelle se r\u00e9attacher\n$ screen -ls\n\n# Se r\u00e9attacher \u00e0 une session\n$ screen -r &lt;nom-de-session&gt;\n</code></pre> <p>Une autre commande tr\u00e8s utile est <code>byobu</code>. Vous pouvez d\u00e9tacher/r\u00e9-attacher des sessions comme pour screen. Comme pour screen, vous pouvez cr\u00e9er plusieurs fen\u00eatres, mais l'interface est peut-\u00eatre un peu plus ergonome. Vous cr\u00e9ez et naviguez parmi les onglets avec les touches , , .</p> <p></p>"},{"location":"outils/vectoriel/","title":"Dessin vectoriel (xfig, inkscape, ipe, graphviz)","text":""},{"location":"outils/vectoriel/#dessin-vectoriel-xfig-inkscape-ipe-graphviz","title":"Dessin vectoriel (xfig, inkscape, ipe, graphviz)","text":"<p>Le dessin vectoriel pr\u00e9sente l'avantage d'\u00eatre, justement, vectoriel, c'est \u00e0 dire d\u00e9crit par un ensemble de directives du type : tracer une ligne entre les points A et B, remplir la zone de la couleur c, .... Cela conduit \u00e0 des dessins qui ne souffre pas d'un passage \u00e0 l'\u00e9chelle contrairement \u00e0 des images qui sont d\u00e9finies par une collection de pixel d'une certaine couleur, ce qu'on appelle des images matricielles (raster graphics). </p> <p>Il existe plusieurs logiciels qui permettent de r\u00e9aliser des dessins vectoriels et je vous en cite trois que je trouve assez pratique :</p> <ul> <li>xfig : l'interface est un peu vieillote mais le logiciel reste assez efficace pour g\u00e9n\u00e9rer de belles figures. Les figures avec l'extension \".fig\" sont d'ailleurs g\u00e9n\u00e9rables facilement depuis un programme puisqu'ils contiennent des descriptions ascii des figures. L'export vers des formats EPS ou PDF se fait gr\u00e2ce \u00e0 l'outil fig2dev. On peut inclure des formules Latex m\u00eame si ce n'est pas compl\u00e8tement imm\u00e9diat</li> <li>inkscape : tr\u00e8s facile d'utilisation et tr\u00e8s pratique</li> <li>ipe : encore mieux je trouve si vous voulez g\u00e9n\u00e9rer des images vectorielles avec des formules Latex</li> <li>dot: language descriptif de diagrammes pour lequel diff\u00e9rents outils <code>dot</code>,   <code>neato</code>, ... permettent de g\u00e9n\u00e9rer des images.</li> </ul>"},{"location":"outils/vectoriel/#xfig","title":"Xfig","text":"<p>xfig est un outil de dessin vectoriel qui est d\u00e9j\u00e0 tr\u00e8s ancien, premi\u00e8re release en 1985 et qui s'av\u00e8re encore tr\u00e8s pratique.</p> <p>L'interface va para\u00eetre un peu vieillote :)</p> <p></p> <p>Quelques \u00e9l\u00e9ments sur xfig :</p> <ul> <li>interface assez simple mais qui permet de r\u00e9aliser des dessins de base : trac\u00e9   de lignes ou autres figures g\u00e9om\u00e9triques, couper des lignes et ajouter des   points, dessiner du texte, des fl\u00eaches, remplir des formes, etc...</li> <li>on peut scripter la production de figures xfig !! Un fichier xfig est un   fichier texte ASCII. Allez voir la description du format dans la   documentation</li> <li>on peut convertir un fichier xfig en image vectorielle SVG/PDF/EPS/... en   utilisant fig2dev.</li> <li>on peut inclure des formules de Math en LaTeX.</li> </ul>"},{"location":"outils/vectoriel/#ipe","title":"IPE","text":"<p>ipe est un petit outil \u00e0 la xfig qui vous permet de r\u00e9aliser des diagrames assez facilement. L'objectif d'IPE est de vous aider \u00e0 construire des images \u00e0 int\u00e9grer dans des documents LaTeX.</p> <p></p> <p>Vous pouvez m\u00eame l'utiliser dans votre navigateur en allant sur la page https://ipe-web.otfried.org/index.html.</p>"},{"location":"outils/vectoriel/#inkscape","title":"Inkscape","text":"<p>Avec inkscape, on est un outil beaucoup plus riche et complet que xfig.</p> <p></p> <p>Pour le coup, forc\u00e9ment, il y a un peu plus d'apprentissage et vous trouverez des didacticiels en ligne.</p>"},{"location":"outils/vectoriel/#diagrammes-avec-graphviz","title":"Diagrammes avec graphviz","text":"<p>Les outils de graphviz sont constitu\u00e9s du langage dot et des outils en ligne de commande <code>dot</code>, <code>neato</code>, <code>circo</code>, ...</p> <p>Le langage dot est un langage de description de diagramme dans lequel vous d\u00e9finissez les noeuds, les ar\u00eates, etc.. mais vous soucier du placement. Les outils <code>dot</code>, <code>netao</code>, etc... permettent de g\u00e9n\u00e9rer un dessin vectoriel \u00e0 partir de cette description. La raison d'avoir plusieurs outils de g\u00e9n\u00e9ration d'images vient du fait qu'il n'y a pas une solution unique pour placer automatiquement les \u00e9l\u00e9ments d'un diagramme \u00e0 partir de sa description et ces outils vont faire diff\u00e9rentes hypoth\u00e8ses.</p> <p>Notez au passage que, comme pour xfig, le format de <code>graphviz</code> est un format texte relativement simple qu'il est possible de g\u00e9n\u00e9rer depuis du code !</p> <p>Plusieurs exemples sont fournis sur la page https://www.graphviz.org/gallery/ et vous pouvez m\u00eame tester en ligne depuis https://magjac.com/graphviz-visual-editor/. L'exemple de diagramme UML, propos\u00e9 par Costa Shukyupin est repr\u00e9sent\u00e9 ci-dessous \u00e0 c\u00f4t\u00e9 de sa version dot.</p> <p></p>"},{"location":"outils/versioning/","title":"Versionner du code (git, github, gitlab)","text":""},{"location":"outils/versioning/#versionner-du-code-git-github-gitlab","title":"Versionner du code (git, github, gitlab)","text":"<p>Aujourd'hui, plus personne ne (devrait) d\u00e9veloppe(r) du code sans utiliser un outil de versionning. Le versionning, qu'il soit local \u00e0 votre machine et utilisant un serveur distant (remote) vous permet de garder une trace de l'historique de votre code. </p> <p>Les outils de versionning permettent plus pr\u00e9cis\u00e9mment :</p> <ul> <li>d'enregistrer des versions sp\u00e9cifiques de votre code (commit),</li> <li>de naviguer dans l'historique de votre (checkout)</li> <li>de d\u00e9velopper des fonctionnalit\u00e9s en parall\u00e8le (branche)</li> <li>d'int\u00e9grer des modifications d'une branche A dans une branche B via des   m\u00e9canismes tels que les rebase ou les merge</li> </ul> <p>Le versioning peut se faire en local ou utiliser un serveur. L'outil de versionning le plus utilis\u00e9 aujourd'hui est tr\u00e8s probablement git, open-source et d\u00e9veloppp\u00e9 initialement par Linus Torvals. Parmi les plateformes en ligne utilisant git comme outil de gestion de version, on peut citer :</p> <ul> <li>https://www.github.com : plateforme propri\u00e9taire d\u00e9velopp\u00e9e et   maintenue par Microsoft</li> <li>https://www.gitlab.com : plateforme open-source qui peut \u00eatre   auto-h\u00e9berg\u00e9e. Beaucoup d'organisations disposent de leurs propres instances   gitlab, comme https://gitlab.inria.fr,   https://gitlab-student.centralesupelec.fr,   https://framagit.org, ...</li> </ul> <p>L'avantage d'utiliser des plateformes en ligne est qu'elles permettent le d\u00e9veloppement collaboratif. Par exemple, le noyau linux est h\u00e9berg\u00e9 sur un d\u00e9p\u00f4t github : https://github.com/torvalds/linux. </p> <p>Les plateformes telles que gitlab et github viennent par ailleurs avec un certain nombre d'autres fonctionnalit\u00e9s absolument g\u00e9niales. Elles vont porter des noms diff\u00e9rents d'une plateforme \u00e0 l'autre mais vous pouvez par exemple: </p> <ul> <li>cr\u00e9er des issues, c'est \u00e0 dire des notes qui signalent aux d\u00e9veloppeurs des bugs, des   am\u00e9liorations souhait\u00e9es, etc... . Ce sont des fils de discussion sur un sujet   particulier</li> <li>cr\u00e9er des pull requests, c'est \u00e0 dire des propositions de modification de   la base de code,</li> <li>d\u00e9clencher des s\u00e9quences d'actions : des Actions sur github, ou du   CI/CD sur gitlab</li> </ul> <p>Le dernier point fait r\u00e9f\u00e9rence aux m\u00e9canismes d'int\u00e9gration et de d\u00e9ploiement continue (ce que github appelle des Actions). C'est un m\u00e9canisme extr\u00eamement puissant qui va vous permettre de d\u00e9clencher du code sous certaines conditions. Quelques cas d'usage :</p> <ul> <li>lancer des tests unitaires d\u00e8s qu'une pull request est cr\u00e9\u00e9e,</li> <li>livrer automatiquement sur https://pypi.org un package   python lorsqu'une nouvelle release est cr\u00e9\u00e9e,</li> <li>compiler et mettre en ligne automatiquement une documentation \u00e9crite avec   mkdocs, jekyll, hugo ou autre,</li> <li>...</li> </ul> <p>Vous pouvez \u00e9galement d\u00e9clencher des signaux (trigger) qui vont d\u00e9clencher des pipelines d'int\u00e9gration et d\u00e9veloppement continus sur d'autres d\u00e9p\u00f4ts. Ce m\u00e9canisme est absolument g\u00e9nial, vraiment.</p> <p>Pour apprendre git, plusieurs ressources sont disponibles :</p> <ul> <li>le tutorial d'Herv\u00e9 Frezza-Buet : https://fix_jer.pages.centralesupelec.fr/tutorials/TPs/GIT/,</li> <li>un tutoriel interactif sur les commits, branchements, etc sur https://learngitbranching.js.org/</li> <li>des explications visuelles des diff\u00e9rents concepts li\u00e9s \u00e0 git sur https://marklodato.github.io/visual-git-guide/index-en.html</li> <li>des explications visuelles dynamiques des concepts li\u00e9 s\u00e0 git sur https://onlywei.github.io/explain-git-with-d3/</li> </ul> <p>Pour ce qui est d'\u00e9crire des pipelines d'int\u00e9gration et de d\u00e9veloppement continue, je n'ai pas pour le moment de tutoriels \u00e0 vous sugg\u00e9rer.</p>"},{"location":"outils/video/","title":"Assembler des images en vid\u00e9o (ffmpeg, avconv)","text":""},{"location":"outils/video/#assembler-des-images-en-video-ffmpeg-avconv","title":"Assembler des images en vid\u00e9o (ffmpeg, avconv)","text":"<p>Si vous disposez d'un ensemble d'images que vous souhaitez assembler en une vid\u00e9o <code>ffmpeg</code> et <code>avconv</code> vous le permettent. Par exemple, vous lancez une simulation depuis laquelle vous sauvegardez des images et vous souhaitez les animer. </p> <p>En imaginant que vous disposez d'une collection d'image dont le nom est de la forme Image-xxxx.ppm, vous pouvez les regrouper en une vid\u00e9o avec une commande du type:</p> <pre><code>$ ffmpeg -i Image-%05d.ppm -b 1M movie.avi\n</code></pre> <p>Sachez que ffmpeg g\u00e8re plusieurs formats d'images (voir http://ffmpeg.org/general.html#Image-Formats). L'option <code>-b 1M</code> contr\u00f4le la qualit\u00e9 (et la taille) de la vid\u00e9o g\u00e9n\u00e9r\u00e9e.</p> <p>J'en profite pour ajouter une petite note et reboucler avec la partie sur les Makefile. Si vous souhaitez cr\u00e9er une vid\u00e9o \u00e0 partir d'une collection d'images mais que vous avez envie de travailler les images pour y incruster des \u00e9l\u00e9ments, pas de soucis, on peut combiner ImageMagick, Makefile et ffmpeg pour nous aider. </p> <p>On partira du principe que ce sont les m\u00eames traitements \u00e0 appliquer \u00e0 toutes les images. Makefile est capable de lister l'ensemble des images d'un r\u00e9pertoire (<code>wildcard</code>), de les ordonner (c'est plus facile de suivre o{`u} en est le traitement, parce que sinon Makefile traitera les images dans un ordre al\u00e9atoire). ImageMagick peut ensuite appliquer un traitement \u00e0 toutes ces images et enfin ffmpeg les assemble pour cr\u00e9er une vid\u00e9o. L'encadr\u00e9 ci-dessous donne un exemple de Makefile pour ce sc\u00e9nario, avec une simple conversion de l'image en niveau de gris avant un assemblage en une vid\u00e9o.</p> <pre><code>CIBLE=video.avi\nIMAGES_BRUTES=$(sort $(wildcard Image-*.png))\nIMAGES_FFMPEG=$(subst Image, image-ffmpeg, $(IMAGES_BRUTES))\n\nimage-ffmpeg-%.png: Image-%.png\n    convert $&lt; -colorspace Gray $@\n\n$(CIBLE): $(IMAGES_FFMPEG)\n    ffmpeg -i $&lt; -b 1M $@\n</code></pre>"},{"location":"outils/web/","title":"Produire un site web, par exemple de documentation (mkdocs, jekyll, hugo)","text":""},{"location":"outils/web/#produire-un-site-web-par-exemple-de-documentation-mkdocs-jekyll-hugo","title":"Produire un site web, par exemple de documentation (mkdocs, jekyll, hugo)","text":"<p>Que ce soit pour partager ses projets, publications, etc.. ou pour la cr\u00e9ation d'une documentation pour un logiciel que vous d\u00e9veloppez, vous pourriez avoir besoin de d\u00e9velopper un site web. </p> <p>Une mani\u00e8re de proc\u00e9der, plut\u00f4t que d'\u00e9crire soit m\u00eame les balises HTML est d'\u00e9crire le contenu de son site en Markdown et d'utiliser un g\u00e9n\u00e9rateur de site transformer les fichiers markdown en pages HTML. Et, cerise sur le g\u00e2teau, en h\u00e9bergeant les fichiers Markdown sur un serveur gitlab ou sur github, vous pouvez coupler votre d\u00e9p\u00f4t \u00e0 de l'int\u00e9gration continue/d\u00e9ploiement continu (CI/CD) pour que la production des pages HTML et la mise en ligne du site se fasse de mani\u00e8re automatique.</p> <p>Plusieurs possibilit\u00e9s s'offrent \u00e0 vous, parmi les plus populaires en ce moment : mkdocs, jekyll ou encore hugo. </p> <p>Les pages que vous \u00eates entrain de regarder sont g\u00e9n\u00e9r\u00e9es avec Mkdocs :</p> <ul> <li>les pages sont h\u00e9berg\u00e9es sur github sur le d\u00e9p\u00f4t https://github.com/jeremyfix/OutilsLibres</li> <li>le site est compos\u00e9 du fichier de configuration mkdocs.yml et le contenu du site comprend des fichiers markdown, par exemple web.md, d'images, de scripts javascripts, etc.</li> <li>la construction du site statique et la mise en ligne est r\u00e9alis\u00e9e par les   actions github d\u00e9finies dans le fichier .github/workflows/mkdocs.yml</li> </ul> <p>D\u00e8s lors qu'une modification du contenu du site est \"push\u00e9e\" sur le d\u00e9p\u00f4t, l'int\u00e9gration s'occupe de construire le site et de le mettre en ligne.</p>"},{"location":"outils/web/#configuration","title":"Configuration","text":"<p>Il est tr\u00e8s facile de construire rapidement un site avec mkdocs. Regardez le getting started. Une fois la mise en place r\u00e9alis\u00e9e, vous pouvez construire localement le site avec</p> <pre><code>$ mkdocs serve\n</code></pre> <p>Si vous voulez ajouter des choses particuli\u00e8res, il y a un peu de configuration initiale \u00e0 mettre en place que l'on retrouve dans le fichier mkdocs.yml. En particulier :</p> <ul> <li>repo_url et site_url permettent de faire appara\u00eetre l'ic\u00f4ne et le lien vers le d\u00e9p\u00f4t   github en haut de page</li> <li>theme permet de configurer le th\u00e8me de vos pages. Ici, on a choisi Material   for MkDocs</li> <li>markdown_extensions liste les extensions utilis\u00e9es, plusieurs \u00e9tant issues de   la documentation de Material for MkDocs pour ajouter la coloration syntaxique   du code, transformer les \u00e9quations Math\u00e9matiques avec Mathjax, etc.</li> </ul> <pre><code>site_name: Les outils du logiciel libre pour l'ing\u00e9nieur\ndocs_dir: ../md\nrepo_url: https://github.com/jeremyfix/OutilsLibres\nsite_url: https://jeremyfix.github.io/OutilsLibres\ntheme: \n  name: material\n  language: fr\n  features:\n    - navigation.sections\n    - toc.follow\n    - toc.integrate\n\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: amber\n...\n</code></pre>"},{"location":"tps/bash/","title":"Bash \u00e0 sable","text":""},{"location":"tps/bash/#bash-a-sable","title":"Bash \u00e0 sable","text":"<p>Le but de ce TP d'introduction est de se familiariser avec l'environnement Unix Ubuntu et de voir quelques outils, notamment <code>bash</code>, que vous utiliserez par la suite dans les TPs. Nous allons voir comment :</p> <ul> <li>cr\u00e9er/supprimer des fichiers/r\u00e9pertoires (\u00e9ventuellement r\u00e9cursivement)</li> <li>\u00e9crire un script bash pour manipuler des fichiers, changer leurs droits</li> <li>rechercher/installer des packages</li> <li>...</li> </ul> <p>Nous allons voir quelques commandes dans ce TP mais il existe des serious games, en ligne, qui vous apprennent \u00e0 prendre en main le shell, des ressources que je tire de ce post de LinuxFr : https://linuxfr.org/users/ckiller/journaux/new-skills-linux:</p> <ul> <li>GameShell : <code>wget https://github.com/phyver/GameShell/releases/download/latest/gameshell.sh &amp;&amp; bash gameshell.sh</code></li> <li>OverTheWire</li> <li>SadServers : pour des techniques plus   avanc\u00e9es</li> </ul>"},{"location":"tps/bash/#prise-en-main","title":"Prise en main","text":"<p>Pendant tous les TPs, nous allons utiliser deux outils : la console (ou terminal) et l'\u00e9diteur <code>emacs</code>. Les scripts seront ex\u00e9cut\u00e9s depuis un terminal et \u00e9crits avec <code>emacs</code>.</p> <p>Sous Gnome 3, pour afficher la liste des applications disponibles, d\u00e9placez le curseur de la souris dans le coin en haut \u00e0 gauche de l\u2019\u00e9cran ou appuyez sur la touche Windows. Tapez \u00ab Terminal \u00bb puis cliquez sur l'application correspondante.</p> <p>C\u2019est dans ce terminal que nous allons ex\u00e9cuter nos scripts, cr\u00e9er des r\u00e9pertoires, etc.</p> <p></p> <p>Pourquoi passer par le terminal ? Je vous l'accorde, \u00e0 premi\u00e8re vue, l'interface est aust\u00e8re. Le terminal est une interface pour interagir avec le shell. Bash est un shell, un langage de programmation qui va vous offrir \u00e9norm\u00e9ment de flexibilit\u00e9 dans la construction de commandes personnalis\u00e9es. Gr\u00e2ce au Bash, vous pouvez combiner des commandes simples pour construire un programme plus compliqu\u00e9. Pour l'instant, cela reste abstrait, mais plusieurs exemples ci-apr\u00e8s vont l'illustrer. Faites-moi confiance.</p> <p>Si vous vous posez des questions sur une commande, peut-\u00eatre que le site https://explainshell.com pourrait vous \u00eatre utile. Regardez par exemple ce qu'il propose sur la commande <code>ls -p | grep -v / | wc -l</code></p>"},{"location":"tps/bash/#navigation-dans-le-systeme-de-fichiers","title":"Navigation dans le syst\u00e8me de fichiers","text":"<p>Quelques commandes de base \u00e0 conna\u00eetre :</p> <ul> <li><code>ls</code> : lister le contenu du r\u00e9pertoire courant</li> <li><code>ls /chemin/vers/un/repertoire</code> : lister un r\u00e9pertoire sp\u00e9cifique</li> <li><code>pwd</code> : afficher le chemin du r\u00e9pertoire courant</li> <li><code>cd</code> : changer de r\u00e9pertoire (<code>cd ..</code>, <code>cd ~</code>)</li> <li><code>mkdir</code> : cr\u00e9er un r\u00e9pertoire (<code>-p</code> pour hi\u00e9rarchique)</li> <li><code>rm</code> : supprimer un fichier (<code>-r</code> pour un r\u00e9pertoire)</li> </ul> <p>Question</p> <p>Cr\u00e9ez un r\u00e9pertoire dans votre home (<code>cd ~</code>) pour y stocker vos scripts.</p>"},{"location":"tps/bash/#rechercherinstaller-des-packages","title":"Rechercher/Installer des packages","text":"<p>Linux permet d\u2019installer facilement des logiciels via un gestionnaire de paquets :</p> <ul> <li> <p>Sous Fedora :</p> <ul> <li><code>dnf search</code> : chercher un paquet</li> <li><code>dnf install</code> : installer</li> <li><code>dnf remove</code> : d\u00e9sinstaller</li> </ul> </li> <li> <p>Sous Ubuntu:</p> <ul> <li><code>apt search</code> :</li> <li><code>apt install</code> : installer</li> <li><code>apt remove</code> : d\u00e9sinstaller</li> </ul> </li> </ul> <p>L'installation par le gestionnaire de paquet est \u00e0 privil\u00e9gier puisqu'il va prendre en charger l'installation des d\u00e9pendances notamment.</p> <p>Les installations n\u00e9cessitent les droits superutilisateur car elles modifient des dossiers syst\u00e8me comme <code>/usr/lib</code>, <code>/usr/bin</code>, etc.</p>"},{"location":"tps/bash/#editer-avec-emacs","title":"\u00c9diter avec Emacs","text":"<p><code>emacs</code> est un \u00e9diteur de texte (un IDE m\u00eame, voir les IDE) tr\u00e8s complet et configurable. Il offre :</p> <ul> <li>coloration syntaxique</li> <li>indentation</li> <li>modes sp\u00e9cifiques selon l\u2019extension (.py, .cpp, .sh, .tex, etc)</li> </ul> <p>Question</p> <p>Lancez ces commandes pour tester les modes : </p><pre><code>emacs titi.py &amp;\nemacs titi.cpp &amp;\nemacs titi.sh &amp;\nemacs titi.tex &amp;\n</code></pre> <p>Note</p> <p>Utilisez <code>&amp;</code> pour ex\u00e9cuter une commande en t\u00e2che de fond. Sans <code>&amp;</code>, utilisez <code>Ctrl+Z</code> puis <code>bg</code>.</p>"},{"location":"tps/bash/#bashons-un-peu","title":"Bashons un peu","text":"<p>Le but est d'\u00e9crire de petits scripts et les assembler avec Bash.</p> <p>Question</p> <p>Lisez, ex\u00e9cutez, exp\u00e9rimentez avec les diff\u00e9rents scripts Bash ci-dessous. Pour chaque script, vous pouvez le coder en utilisant emacs ou VS code et l'ex\u00e9cuter en suivant les instructions.</p>"},{"location":"tps/bash/#mon-premier-script-bash","title":"Mon premier script bash","text":"<p>Fichier <code>hello.sh</code> :</p> <pre><code>#!/bin/bash\n\necho \"hello world!\"\n</code></pre> <p>Ex\u00e9cution : </p><pre><code>sh hello.sh\n</code></pre> <p>Puis : </p><pre><code>chmod u+x hello.sh\n./hello.sh\n</code></pre> <p>La ligne <code>#!/bin/bash</code> indique l\u2019interpr\u00e9teur \u00e0 utiliser pour \u00e9valuer le script. C'est ce qu'on appelle le shebang.</p>"},{"location":"tps/bash/#passer-des-arguments-a-un-script-bash","title":"Passer des arguments \u00e0 un script bash","text":"<pre><code>#!/bin/bash\n\necho \"J'ai re\u00e7u $# arguments\"\n\nif [ $# != 0 ]; then\n    echo \"Liste des arguments :\"\n    for i in $@; do\n        echo \"$i\"\n    done\nelse\n    echo \"donc rien \u00e0 lister\"\nfi\n</code></pre>"},{"location":"tps/bash/#fonctions-utiles","title":"Fonctions utiles","text":"<pre><code>#!/bin/bash\n\necho \"Je m'ex\u00e9cute depuis le r\u00e9pertoire `pwd`\"\necho \"Le script $0 s'appelle `basename $0` et se trouve dans `dirname $0`\"\n</code></pre>"},{"location":"tps/bash/#entrees-et-sorties-standards","title":"Entr\u00e9es et sorties standards","text":"<p>Une commande peut \u00e9crire sur :</p> <ul> <li><code>stdout</code> : sortie standard</li> <li><code>stderr</code> : sortie d\u2019erreur</li> <li>et recevoir via <code>stdin</code> : entr\u00e9e standard</li> </ul> <p></p>"},{"location":"tps/bash/#enchainer-des-scripts-filtres-et-pipe","title":"Encha\u00eener des scripts : filtres et pipe","text":"<p>Un pipe (<code>|</code>) connecte la sortie standard d\u2019une commande \u00e0 l\u2019entr\u00e9e standard d\u2019une autre.</p> <p>Exemples : </p><pre><code>du * | sort -n\ndu * | sort -n | tail -10\nls -p | grep -v / | wc -l\n</code></pre> <p>Consultez <code>man ls</code>, <code>man grep</code>, <code>man wc</code> pour les d\u00e9tails.</p>"},{"location":"tps/bash/#lire-lentree-standard-dans-un-script","title":"Lire l'entr\u00e9e standard dans un script","text":"<p>Fichier <code>read_input.sh</code> : </p><pre><code>#!/bin/bash\nwhile read -r ligne; do\n    echo \"Ligne lue : $ligne\"\ndone\n</code></pre> <p>Test : </p><pre><code>cat read_input.sh | ./read_input.sh\n</code></pre>"},{"location":"tps/bash/#aide-sur-les-commandes","title":"Aide sur les commandes","text":"<p>Utilisez <code>man</code> pour consulter l\u2019aide : </p><pre><code>man mkdir\n</code></pre> Utilisez les fl\u00e8ches pour naviguer et <code>q</code> pour quitter. <p>Il existe plusieurs mani\u00e8res d'avoir de l'aide sur les commandes</p>"},{"location":"tps/eruption/","title":"TP : Eruption solaire et transit de Mercure, \u00e0 partir des donn\u00e9es AIA SDO","text":""},{"location":"tps/eruption/#tp-eruption-solaire-et-transit-de-mercure-a-partir-des-donnees-aia-sdo","title":"TP : Eruption solaire et transit de Mercure, \u00e0 partir des donn\u00e9es AIA SDO","text":"<p>Danger</p> <p>miroir local</p> <p></p>"},{"location":"tps/eruption/#introduction","title":"Introduction","text":"<p>Le but de ce TP est de construire une vid\u00e9o \u00e0 partir de donn\u00e9es collect\u00e9es sur le soleil par le Solar Dynamics Observatory. On utilisera uniquement les images du soleil captur\u00e9es \u00e0 intervalles r\u00e9guliers. Les images sont disponibles \u00e0 l'adresse http://jsoc.stanford.edu/data/aia/images/. Elles sont class\u00e9es par date de mesure, la structure du r\u00e9pertoire distant \u00e9tant :</p> <p>http://jsoc.stanford.edu/data/aia/images/YYYY/MM/DD/\\(\\lambda\\)/fichier.jp2</p> <p>Le SDO observe le soleil dans diff\u00e9rentes longueurs d\u2019onde \\(\\lambda \\in [94, 131, 171 , 193, 211, 304, 335, 1600, 1700, 4500]\\)\u00c5 (angstroms). Pour avoir une id\u00e9e des mesures \u00e0 ces diff\u00e9rentes longueurs d\u2019onde, vous pouvez vous rendre \u00e0 l\u2019adresse http://sdo.gsfc.nasa.gov/data/, ou bien regarder l\u2019image en haut de la page.</p> <p>Durant ce TP, je vous propose d'utiliser les mesures \u00e0 \\(211\\)\u00c5. Les images sont au format JPEG2000 avec l'extension \\(jp2\\) et une r\u00e9solution de \\(4096 \\times 4096\\). Dans ce TP, on cherche \u00e0 illustrer la construction de programmes du type ``puits | commande1 | commande2 ....''. On va :</p> <ul> <li>r\u00e9cup\u00e9rer les images, </li> <li>les convertir en JPEG, </li> <li>les redimensionner, </li> <li>y incruster la date et l'heure de la mesure et </li> <li>les combiner pour construire une vid\u00e9o. </li> </ul> <p>On va voir dans ce TP l'utilisation d'un certain nombre de programmes tels que <code>bash</code>, <code>lynx</code>, <code>wget</code>, <code>convert</code> (imagemagick), <code>gawk</code>, <code>sed</code> et <code>ffmpeg</code>. On cherche ainsi \u00e0 ne pas r\u00e9inventer la roue, votre probl\u00e8me est de produire une vid\u00e9o \u00e0 partir des images brutes et on va voir qu'en assemblant plusieurs briques d\u00e9j\u00e0 existantes, on peut facilement r\u00e9soudre ce probl\u00e8me.</p> <p>Warning</p> <p>Attention: Lors de la mise en place du TP, il peut \u00eatre int\u00e9ressant d'utiliser un miroir local en ne r\u00e9cup\u00e9rant par example que les images de quelques \u00e9ruptions solaires, \u00e0 savoir:</p> <ul> <li>le 07/06/2011 en \\(304\\)\u00c5 : grosse \u00e9ruption entre 6h et 7h</li> <li>le 31/08/2012 en \\(211\\)\u00c5 et \\(171\\)\u00c5 : petite \u00e9ruption autour de 19h</li> <li>le 09/05/2016, Mercure transite entre le soleil et la terre vers 11h30</li> </ul> <p>Il y a plusieurs raisons \u00e0 l'utilisation de ce miroir local: </p> <ol> <li>les temps d'acc\u00e8s, </li> <li>je crains que si tout le monde acc\u00e8de de mani\u00e8re r\u00e9p\u00e9t\u00e9e au site jsoc.stanford.edu, nous soyons banis de leur serveur web et donc qu'on ne puisse pas faire correctement le TP, </li> <li>on ne surcharge pas inutilement leurs serveurs pour nos TPs.</li> </ol> <p>Nous allons pour le coup utiliser un miroir local. Demandez moi l'URL ! Dans toute la suite du sujet, il faudra bien penser \u00e0 remplacer jsoc.stanford.edu par l'adresse vers le serveur infomob.</p>"},{"location":"tps/eruption/#structure-du-projet","title":"Structure du projet","text":"<p>Je vous propose de cr\u00e9er quelques r\u00e9pertoires pour structurer votre projet. Pour les cr\u00e9er, forcez-vous \u00e0 utiliser les commandes <code>mkdir</code>, <code>ls</code>, etc. depuis un terminal.</p> <ul> <li>scripts : contiendra la plupart des scripts que vous \u00e9crirez,</li> <li>raw_images : contiendra de mani\u00e8re temporaire les images brutes au format .jp2,</li> <li>images: contiendra les images converties au format jpeg et redimensionn\u00e9es,</li> <li>postproc_images: contiendra les images jpeg dans lesquelles la date et l'heure auront \u00e9t\u00e9 incrust\u00e9es</li> <li>video : contiendra les vid\u00e9os g\u00e9n\u00e9r\u00e9es</li> </ul> <p>La figure ci-dessous donne une vision d'ensemble du programme que nous allons \u00e9crire.</p> <p></p>"},{"location":"tps/eruption/#recuperation-des-donnees-dune-journee","title":"R\u00e9cup\u00e9ration des donn\u00e9es d'une journ\u00e9e","text":"<p>Le but de cette partie est d'\u00e9crire un script Bash qui se charge de r\u00e9cup\u00e9rer les images d'une journ\u00e9e. Ce script prendra 4 arguments, \u00e0 savoir :</p> <ul> <li>l'ann\u00e9e YYYY, </li> <li>le mois MM, </li> <li>le jour DD et </li> <li>la longueur d'onde \\(\\lambda\\) des mesures. </li> </ul> <p>Il devra produire en sortie le flux des URLs des images de cette journ\u00e9e particuli\u00e8re \u00e0 la longueur d'onde \\(\\lambda\\).</p> <p>Si vous allez sur le site http://jsoc.stanford.edu/data/aia/images, et regardez les images du 31 ao\u00fbt 2012, vous constaterez qu'il y a \u00e9norm\u00e9ment d'images, prises \u00e0 des heures r\u00e9guli\u00e8res, mais dont on ne peut pas facilement pr\u00e9dire le nom de fichier. </p> <p>On va donc proc\u00e9der diff\u00e9remment\u00a0: on va lister l'ensemble des images disponibles dans le r\u00e9pertoire du 31 ao\u00fbt 2012 \u00e0 \\(211\\)\u00c5. Pour cela, on va utiliser l'explorateur <code>lynx</code> (n'h\u00e9sitez pas \u00e0 appeler man lynx pour en savoir plus). <code>lynx</code> est un explorateur internet textuel, sans fen\u00eatre graphique, qui s'affiche dans la console \ud83d\ude31.</p> <p>Question</p> <p>Lancez lynx, d\u00e9cortiquez l'interface pour effectuer une recherche sur un moteur de recherche </p> <p>Je suis d\u2019accord avec vous, cette mani\u00e8re d\u2019explorer internet n\u2019est pas tr\u00e8s confortable. Mais, on peut utiliser lynx pour r\u00e9cup\u00e9rer le contenu d\u2019une page gr\u00e2ce \u00e0 l\u2019option dump <code>lynx -dump URL</code>. En ajoutant l\u2019option <code>-listonly</code>, on ne r\u00e9cup\u00e8re que la liste des r\u00e9f\u00e9rences (les liens vers les images dans notre cas). Essayez la commande ci-dessous :</p> <pre><code>lynx -dump -listonly http://jsoc.stanford.edu/data/aia/images/2012/08/31/211/ | less\n</code></pre> <p>Il appara\u00eet le contenu de la page, converti en texte, dans lequel vous pouvez naviguer avec les fl\u00e8ches directionnelles. Le contenu affich\u00e9 devrait ressembler \u00e0 \u00e7a :</p> <pre><code>References\n\n   1. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/\n   2. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_00_11_63__SDO_AIA_AIA_211.jp2\n   3. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_00_47_62__SDO_AIA_AIA_211.jp2\n   4. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_01_23_62__SDO_AIA_AIA_211.jp2\n   5. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_01_59_62__SDO_AIA_AIA_211.jp2\n   6. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_02_35_62__SDO_AIA_AIA_211.jp2\n   7. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_03_11_62__SDO_AIA_AIA_211.jp2\n   8. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_03_47_62__SDO_AIA_AIA_211.jp2\n   9. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_04_23_63__SDO_AIA_AIA_211.jp2\n  10. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_04_59_62__SDO_AIA_AIA_211.jp2\n  11. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_05_35_62__SDO_AIA_AIA_211.jp2\n  12. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_06_11_63__SDO_AIA_AIA_211.jp2\n  13. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_06_47_62__SDO_AIA_AIA_211.jp2\n  14. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_07_23_62__SDO_AIA_AIA_211.jp2\n  15. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_07_59_62__SDO_AIA_AIA_211.jp2\n  16. https://jsoc1.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_08_35_62__SDO_AIA_AIA_211.jp2\n</code></pre> <p>Notez qu'on a redirig\u00e9 la sortie standard de lynx dans l'entr\u00e9e standard de <code>less</code>. <code>less</code> est un programme qui permet de parcourir du contenu texte (e.g. un fichier, mais il peut \u00e9galement lire depuis l'entr\u00e9e standard).</p> <p>Question</p> <p>\u00c9crivez un script bash <code>scripts/get_index.sh</code> qui :</p> <ul> <li>prenne le jour, le mois, l'ann\u00e9e et la longueur d'onde des mesures \u00e0 r\u00e9cup\u00e9rer</li> <li>r\u00e9cup\u00e8re le contenu de la page gr\u00e2ce \u00e0 <code>lynx -dump -listonly</code></li> <li>redirige dans la sortie standard le contenu t\u00e9l\u00e9charg\u00e9 (on pourra utiliser le programme <code>cat</code> pour afficher dans la sortie standard le contenu d'un fichier)</li> </ul>"},{"location":"tps/eruption/#extraire-les-urls-des-images","title":"Extraire les URLs des images","text":"<p>Le contenu affich\u00e9 par le script pr\u00e9c\u00e9dent contient beaucoup d'informations. On souhaite en extraire les URLs vers les images list\u00e9es sur la page. Les URLs que nous cherchons \u00e0 extraire ont un format tr\u00e8s particulier ; elles commencent par \"http://\"  et finissent par \".jp2\". Pour filtrer les lignes qui ne contiennent que ce motif, on va utiliser <code>gawk</code> et ce qu'on appelle des expressions r\u00e9guli\u00e8res.</p> <p><code>awk</code> est un programme qui applique un programme sur un fichier (ou l'entr\u00e9e standard) ligne par ligne. Un programme awk est de la forme </p> <p>awk 'pattern { action }'</p> <p><code>awk</code> comprends ce mini-programme comme :</p> <p>si la ligne est filtr\u00e9e par le patron pattern alors, on r\u00e9alise l'action action\"</p> <p>Par ailleurs, <code>awk</code> divise la ligne selon un s\u00e9parateur (modifiable par l'option <code>-FS sep</code>), qui est l'espace par d\u00e9faut.</p> <p>Prenons un exemple concret. Ex\u00e9cutez votre script <code>get_index.sh</code> et redirigez la sortie standard dans un fichier :</p> <pre><code>bash:$ ./scripts/get_index.sh 31 08 2012 211 &gt; 31_08_2012_211\nbash:$ less 31_08_2012_211\n</code></pre> <p>On y retrouve bien la liste des liens vers les images. On va maintenant lire le fichier avec <code>cat</code> et le faire passer par <code>awk</code>.</p> <pre><code>bash:$ cat 31_08_2012_211 | awk '{ print $0 }'\nbash:$ cat 31_08_2012_211 | awk '{ print $1 }'\nbash:$ cat 31_08_2012_211 | awk '{ print $2 }'\n</code></pre> <p>Si vous voulez voir plus en d\u00e9tails la sortie de awk, n'h\u00e9sitez pas \u00e0 rediriger sa sortie dans less en ajoutant <code>| less</code>. </p> <p>Les pattern et action du programme <code>awk</code> peuvent prendre plusieurs formes (voir http://www.gnu.org/software/gawk/manual/gawk.html#Patterns-and-Actions), on ne va en voir ici que certaines d'entre elles. Dans l'exemple ci-dessus, nous n'avons pas pr\u00e9cis\u00e9 de pattern, toutes les lignes sont ainsi retenues et vous avez d\u00fb constater que la premi\u00e8re commande affiche toute la ligne, la deuxi\u00e8me seulement le num\u00e9ro du lien et la derni\u00e8re l'adresse. Quand <code>awk</code> parcours une ligne, il cr\u00e9e plusieurs variables utilisables dans les pattern et action, en particulier les variables $0, $1, ... $NF qui permettent d'acc\u00e9der aux champs extraits par <code>awk</code> (http://www.gnu.org/software/gawk/manual/gawk.html#Fields. $0 est une variable particuli\u00e8re qui contient toute la ligne lue par <code>awk</code>. Les champs sont accessibles par les variables $1, $2, ... ; Il y a \u00e9galement d'autres variables, comme NF \u00e9gal au nombre de champs dans la ligne, de telle sorte que $NF sera toujours le dernier champ extrait. La variable NR contient le num\u00e9ro de ligne lu, etc.</p> <p>\u00c0 titre d'exemple, on peut facilement d\u00e9coder la lettre envoy\u00e9e par George Sand \u00e0 Alfred de Musset ci-dessous :</p> <pre><code>Cher ami,\nJe suis toute \u00e9mue de vous dire que j'ai\nbien compris l'autre jour que vous aviez\ntoujours une envie folle de me faire\ndanser. Je garde le souvenir de votre\nbaiser et je voudrais bien que ce soit\nune preuve que je puisse \u00eatre aim\u00e9e\npar vous. Je suis pr\u00eate \u00e0 montrer mon\naffection toute d\u00e9sint\u00e9ress\u00e9e et sans cal-\ncul, et si vous voulez me voir ainsi\nvous d\u00e9voiler, sans artifice, mon \u00e2me\ntoute nue, daignez me faire visite,\nnous causerons et en amis franchement\nje vous prouverai que je suis la femme\nsinc\u00e8re, capable de vous offrir l'affection\nla plus profonde, comme la plus \u00e9troite\namiti\u00e9, en un mot : la meilleure \u00e9pouse\ndont vous puissiez r\u00eaver. Puisque votre&gt;\n\u00e2me est libre, pensez que l'abandon ou je\nvis est bien long, bien dur et souvent bien&gt;\ninsupportable. Mon chagrin est trop\ngros. Accourrez bien vite et venez me le\nfaire oublier. \u00c0 vous je veux me sou-\nmettre enti\u00e8rement.\nVotre poup\u00e9e \n\\end{verbatim}\n\\end{center}\n</code></pre> <p>en utilisant la commande awk : </p> <pre><code>awk 'NR % 2 == 1 { print $0 }'\n</code></pre> <p>qui permet d'afficher toutes les lignes d'indice impair. La r\u00e9ponse de Musset ci-dessous :</p> <pre><code>Quand je mets \u00e0 vos pieds un \u00e9ternel hommage,\nVoulez-vous qu'un instant je change de visage ?\nVous avez captur\u00e9 les sentiments d'un coeur\nQue pour vous adorer forma le cr\u00e9ateur.\nJe vous ch\u00e9ris, amour, et ma plume en d\u00e9lire\nCouche sur le papier ce que je n'ose dire.\nAvec soin de mes vers lisez les premiers mots,\nVous saurez quel rem\u00e8de apporter \u00e0 mes maux. \n</code></pre> <p>se d\u00e9crypte facilement en utilisant awk. Le programme <code>decode_musset.awk</code> ci-dessous permet en effet de le d\u00e9crypter :</p> <pre><code>awk -f decode_musset.awk musset_sand.txt\n</code></pre> <p>Dans le programme AWK, ORS signifie Output Record Separator c'est-\u00e0-dire le caract\u00e8re utilis\u00e9 entre chaque r\u00e9sultat filtr\u00e9.</p> <p>decode_musset.awk </p><pre><code>BEGIN { ORS = \" \" } \n{ print $1 }\nEND { print \"? \\n\" }\n</code></pre> <p>Le premier exemple utilise une expression arithm\u00e9tique <code>NR % 2 == 1</code> comme pattern. On peut aussi utiliser des expressions r\u00e9guli\u00e8res. Par exemple, pour v\u00e9rifier si une ligne contient une URL vers une image au format jp2, on peut utiliser la commande awk : </p> <pre><code>awk '/http:\\/\\\\/.*\\.jp2/ { print $2 }\n</code></pre> <p>Cette commande un peu \u00e9trange recherche, dans la ligne courante, une cha\u00eene de caract\u00e8re de la forme http:// (<code>http:\\/\\/</code>), suivi d'un nombre arbitraire de caract\u00e8res (<code>.*</code>), suivi de .jp2 (<code>\\.jp2</code>). Si cette expression r\u00e9guli\u00e8re est v\u00e9rifi\u00e9e, alors le deuxi\u00e8me champ $2 est affich\u00e9. </p> <p>Question</p> <p>Ecrivez un script bash <code>scripts/extract_url.sh</code> qui, \u00e9tant donn\u00e9 la liste des r\u00e9f\u00e9rences obtenues avec Lynx, produise un flux dans la sortie standard des URL des images.</p> <p>Question</p> <p>Testez le script que vous venez d'\u00e9crire en lui donnant en entr\u00e9e un contenu r\u00e9cup\u00e9r\u00e9 par Lynx. Je vous propose d'utiliser le fichier 2012_08_31_211 que avez cr\u00e9\u00e9 pr\u00e9c\u00e9demment. Pour lire ce fichier et le rediriger vers l'entr\u00e9e standard, nous utilisons la commande <code>cat</code>. Vous pouvez donc v\u00e9rifier le fonctionnement de votre script par la commande ci-dessous~:</p> <pre><code>cat 31_08_2012_211 | ./scripts/extract_url.sh\n</code></pre> <p>Cela devrait vous afficher les URLs de toutes les images. </p> <p>Note</p> <p>Pour n'en afficher qu'une partie, par exemple les 10 premi\u00e8res ou 10 derni\u00e8res, vous pouvez utiliser les commandes <code>head</code> et <code>tail</code>: </p><pre><code>cat 31_08_2012_211 | ./scripts/extract_url.sh | head -10\n</code></pre> <p>Ce qui devrait produire: </p><pre><code>http://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_00_11_63__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_00_47_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_01_23_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_01_59_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_02_35_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_03_11_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_03_47_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_04_23_63__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_04_59_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_05_35_62__SDO_AIA_AIA_211.jp2\n</code></pre> <pre><code>cat 31_08_2012_211 | ./scripts/extract_url.sh | tail -10\n</code></pre> <p>ce qui devrait produire:</p> <pre><code>http://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_54_11_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_54_47_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_55_23_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_55_59_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_56_35_63__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_57_11_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_57_47_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_58_23_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_58_59_62__SDO_AIA_AIA_211.jp2\nhttp://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__23_59_35_62__SDO_AIA_AIA_211.jp2\n</code></pre> <p>Si vous voulez savoir combien d'images sont ainsi disponibles, on peut utiliser un compteur, incr\u00e9ment\u00e9 chaque fois que l'expression r\u00e9guli\u00e8re est v\u00e9rifi\u00e9e :</p> <pre><code>awk 'BEGIN { sum = 0 } /http:\\/\\/.*\\.jp2/ { sum = sum + 1 } END { print sum }'\n</code></pre> <p>Sur le fichier de dump utilis\u00e9 pr\u00e9c\u00e9demment, cela nous donne \\(2426\\) images.</p>"},{"location":"tps/eruption/#affichage-partiel-du-flux-durl-des-images","title":"Affichage partiel du flux d\u2019URL des images","text":"<p>On peut maintenant tester nos deux premiers scripts en les mettant \"bout \u00e0 bout\". </p> <p>Question</p> <p>Ecrivez un script <code>all.sh</code> qui :</p> <ul> <li>prend en param\u00e8tres quatre arguments : <code>DD</code>, <code>MM</code>, <code>YYYY</code> et <code>lambda</code></li> <li>utilise <code>scripts/get_index.sh</code> pour extraire les r\u00e9f\u00e9rences de la page d'images \u00e0 la date et longueur d\u2019onde donn\u00e9es</li> <li>passe ces r\u00e9f\u00e9rences \u00e0 <code>scripts/extract_url.sh</code> pour obtenir les URL des images</li> <li>affiche ces URL</li> </ul> <p>Pour l'affichage, vous pourrez v\u00e9rifier que vous capturez bien les premi\u00e8res et derni\u00e8res images en n'affichant qu'une partie du flux des URLs \u00e0 l'aide des commandes head et tail.</p> <p>Note</p> <p>Utilisez <code>head</code> ou <code>tail</code> pour n\u2019en afficher qu\u2019une partie et v\u00e9rifier que \u00e7a fonctionne.</p>"},{"location":"tps/eruption/#telechargement-des-images","title":"T\u00e9l\u00e9chargement des images","text":"<p>Nous avons g\u00e9n\u00e9r\u00e9, gr\u00e2ce \u00e0 la commande pr\u00e9c\u00e9dente, un flux dans la sortie standard d'URL des images jp2 qui nous int\u00e9ressent. Nous souhaitons maintenant t\u00e9l\u00e9charger ces images. Pour ce faire, nous allons utiliser la commande <code>wget</code>. L'utilisation la plus simple de <code>wget</code> est de l'appeler par <code>wget url</code>, par exemple :</p> <pre><code>wget http://jsoc.stanford.edu/data/aia/images/2012/08/31/211/2012_08_31__00_00_23_34__SDO_AIA_AIA_211.jp2\n</code></pre> <p>t\u00e9l\u00e9charge l'image. Vous remarquerez que l'image t\u00e9l\u00e9charg\u00e9e est plac\u00e9e dans le r\u00e9pertoire d'appel de la commande, le r\u00e9pertoire courant. </p> <p>On souhaite que les images t\u00e9l\u00e9charg\u00e9es soient plac\u00e9es dans le r\u00e9pertoire raw_images. </p> <p>Question</p> <p>A l'aide de la page du manuel de wget (accessible par <code>man wget</code>), et en regardant en particulier les options -nd et -P, \u00e9crivez un script <code>scripts/telecharge_img.sh</code> qui t\u00e9l\u00e9charge les images dont les URLs sont fournies sur l'entr\u00e9e standard et les place dans le r\u00e9pertoire <code>raw_images</code></p> <p>Note</p> <p>Notez qu'on pourrait aussi changer de r\u00e9pertoire dans le script <code>telecharge_img.sh</code>, pour se placer dans <code>raw_images</code>, avant de t\u00e9l\u00e9charger l'image</p> <p>La deuxi\u00e8me chose \u00e0 faire est d'afficher dans la sortie standard le chemin vers l'image t\u00e9l\u00e9charg\u00e9e. Pourquoi ? parce qu'on souhaite poursuivre les traitements en indiquant au futur script de traitement d'image sur quelle image travailler. Comment faire ? Votre script <code>scripts/telecharge_img.sh</code> attends une URL dans l'entr\u00e9e standard. Ce que nous allons faire, c'est utiliser awk avec pour action d'afficher le dernier champ ($NF) lorsque la ligne est divis\u00e9e selon le s\u00e9parateur '/'. Regardons un exemple :</p> <pre><code>$ echo \"http://un.exemple/durl/monimage.jp2\" | awk -F/ '{print $NF}'\nmonimage.jp2\n$ filename=`echo \"http://un.exemple/durl/monimage.jp2\" | awk -F/ '{print $NF}'`\n$ echo \"./raw_images/$filename\" \n./raw_images/monimage.jp2\n</code></pre> <p>On retrouve ici plusieurs choses. La premi\u00e8re est l'ex\u00e9cution d'une commande (entre les backquotes `...`) et l'affectation du r\u00e9sultat dans la variable filename. La deuxi\u00e8me est la construction \u00e0 la vol\u00e9e de la cha\u00eene de caract\u00e8res correspondant au chemin vers l'image.</p> <p>Question</p> <p>Ajoutez l'appel \u00e0 votre script <code>scripts/telecharge_img.sh</code> dans le script <code>all.sh</code>. </p> <p>En ex\u00e9cutant votre script, vous devriez voir la sortie ci-dessous :</p> <pre><code>$ ./all.sh 31 08 2012 211\n./raw_images/2012_08_31__00_00_11_63__SDO_AIA_AIA_211.jp2\n./raw_images/2012_08_31__00_00_47_62__SDO_AIA_AIA_211.jp2\n./raw_images/2012_08_31__00_01_23_62__SDO_AIA_AIA_211.jp2\n./raw_images/2012_08_31__00_01_59_62__SDO_AIA_AIA_211.jp2\n./raw_images/2012_08_31__00_02_35_62__SDO_AIA_AIA_211.jp2\n./raw_images/2012_08_31__00_03_11_62__SDO_AIA_AIA_211.jp2\n</code></pre>"},{"location":"tps/eruption/#traitement-des-images","title":"Traitement des images","text":"<p>Nous avons r\u00e9cup\u00e9r\u00e9 une collection d'images au format JPEG2000 \".jp2\". On souhaite :</p> <ol> <li>d\u00e9compresser l'image noir et blanc du fichier jp2, </li> <li>la redimensionner et y incruster la date/heure de la mesure et \u00e9ventuellement lui appliquer un gradient de couleur (on en parle \u00e0 la fin du sujet, en bonus). </li> </ol> <p>Pour cela, on va \u00e9crire un script Bash qui va essentiellement utiliser les outils opj_decompress et convert sur toutes les images dont le chemin est transmis sur l'entr\u00e9e standard, ainsi que quelques outils de r\u00e9\u00e9criture pour transformer le nom du fichier d'image qui contient l'heure et la date de la mesure.</p> <p>Commen\u00e7ons par prendre en main <code>convert</code>. Comme vous pourrez le lire sur la page d\u00e9di\u00e9e \u00e0 cet outil, <code>convert</code> est un des outils fournis par ImageMagick, GraphicsMagick, .. et qui permet de manipuler des images: </p> <ul> <li>convertir d'un format \u00e0 un autre en appliquant \u00e9ventuellement un nombre arbitraire de filtres, </li> <li>redimensionner les images, </li> <li>y introduire du texte, </li> <li>y appliquer des effets (l'effet polaroid est tr\u00e8s sympa)</li> <li>combiner plusieurs images, </li> <li>etc.</li> </ul> <p>Question</p> <p>Commencez par vous assurer que vous disposez d'une image au format \".jp2\" dans le r\u00e9pertoire <code>raw_images</code>. Appelons la \"img.jp2\". </p> <p>Utilisez opj_decompress pour convertir l'image jp2 en pgm (cf. <code>man opj_decompress</code>). </p> <p>Utilisez <code>convert</code> et l'option resize pour redimensionner l'image \"img.jp2\" \u00e0 10% de sa taille d'origine et la convertir en l'image \"img.jpg\".  </p> <p>Vous savez alors d\u00e9compresser l'image jp2 et la redimensionner, il ne nous reste plus qu'\u00e0 appliquer cette op\u00e9ration sur toutes les images dont le chemin est fourni sur l'entr\u00e9e standard.</p> <p>Nous allons (mais lisez la suite avant de commencer) \u00e9crire un script <code>scripts/convert_img.sh</code> qui va :</p> <ul> <li>lire des chemins vers des images au format jp2 depuis l'entr\u00e9e standard (voir p.\\pageref{p:entrees_sorties_standards})</li> <li>construire la cha\u00eene de caract\u00e8res du chemin vers l'image au format jpg (utilisez sed), sachant que l'image cible doit \u00eatre sauvegard\u00e9e dans le r\u00e9pertoire <code>image</code></li> <li>convertisse et redimensionne l'image source en l'image cible \u00e0 10% de sa taille (utilisez <code>convert</code>)</li> <li>affiche dans la sortie standard le chemin vers l'image cible </li> </ul> <p>Note</p> <p>Indications Pour construire le chemin vers l'image cible, il faut plusieurs choses: extraire le nom du fichier pass\u00e9 dans l'entr\u00e9e standard (commande \\basename), remplacer l'extension jp2 par jpg (utiliser \\sed), concat\u00e9ner le r\u00e9pertoire cible avec le nom du fichier image cible. Quelques exemples de ces outils sont donn\u00e9s ci-dessous~:</p> <pre><code>$ basename moncheminversune/image.jp2\nimage.jp2\n$ echo image.jp2 | sed 's/.jp2/.jpg/'\nimage.jpg\n$ filename=image.jpg; output_path=output/$filename; echo $output_path\noutput/image.jpg\n</code></pre> <p>On voit ici un premier exemple d'utilisation de sed pour faire de la substitution; c'est la signification du prefixe 's' lors de l'appel \u00e0 sed. L'argument pass\u00e9 \u00e0 sed se lit 's/chaine de caract\u00e8re source/chaine de carat\u00e8re destination/'; Ainsi 's/.jp2/.jpg/' remplace la premi\u00e8re occurrence de \".jp2\" par \".jpg\"; Si jamais vous voulez remplacer toutes les occurrences d'une chaine par une autre, il vous suffit d'ajouter le suffixe g, par exemple 's/.jp2/.jpg/g'.</p> <p>Question</p> <p>A vous de jouer en \u00e9crivant et testant le script <code>scripts/convert_img.sh</code></p>"},{"location":"tps/eruption/#incrustation-de-la-date-et-de-lheure-de-la-mesure","title":"Incrustation de la date et de l'heure de la mesure","text":"<p>On souhaite maintenant incruster la date et l'heure de la mesure dans chacune des images comme on le montre sur la figure ci-dessous :</p> <p> </p> <p>Ce qui est pratique, c'est que la date et l'heure de la mesure se trouvent dans le nom de chaque image. Il suffit donc de transformer le nom de fichier d'une image pour obtenir la cha\u00eene de caract\u00e8res \u00e0 incruster dans l'image, par exemple :</p> <p>2012_08_31__00_00_23_34__SDO_AIA_AIA_211.jpg \\(\\mapsto\\) 01/05/2013 00:00</p> <p>Ce travail de r\u00e9\u00e9criture peut \u00eatre fait \u00e0 l'aide de <code>sed</code> en plusieurs \u00e9tapes en passant par les r\u00e9\u00e9critures suivantes :</p> <ol> <li>2012_08_31__00_00_23_34__SDO_AIA_AIA_211.jpg</li> <li>\\(\\mapsto\\) 2012_08_31__00_00 </li> <li>\\(\\mapsto\\) 2012_08_31 00_00</li> <li>\\(\\mapsto\\) 01/05/2013 00:00 </li> </ol> <p>Le passage de (1) \u00e0 (2) peut se faire en supprimant (i.e. remplacer par une cha\u00eene vide) un motif de la forme \"_dd...d_dd...d__SDO_AIA_dd...d\" ou \"dd...d\" indique une s\u00e9quence de longueur arbitraire de chiffre entre 0 et 9. Le motif pour caract\u00e9riser un nombre arbitraire de chiffres entre 0 et 9 est \"[0-9]*\". </p> <p>Le passage de l'\u00e9tape (2) \u00e0 l'\u00e9tape (3) se fait en rempla\u00e7ant le motif \"__\" par \" \". </p> <p>Le passage de (3) \u00e0 (4) peut se faire facilement en utilisant la capture de groupe. Prenons un exemple :</p> <pre><code>$ echo 2012_08_31 | sed -r 's/([0-9]*)_([0-9]*)_([0-9]*)/\\3:\\2:\\1/'\n31:08:2012\n$ echo 2012_08_31 | sed -r 's/([0-9]*)_([0-9]*)_([0-9]*)/\\3\\/\\2\\/\\1/'\n31/08/2012\n</code></pre> <p>On remarquera l'utilisation de l'option \"-r\" qui permet d'utiliser des expressions r\u00e9guli\u00e8res \u00e9tendues (par opposition aux expressions r\u00e9guli\u00e8res de base) et facilite l'\u00e9criture de l'expression r\u00e9guli\u00e8re pour des groupes, c'est \u00e0 dire les parties de l'expression de la forme \"([0-9]*)\". Si nous voulions utiliser les expressions r\u00e9guli\u00e8res de base, nous aurions d\u00fb l'\u00e9crire \"\\([0-9]*\\)\".</p> <p>Nous sommes maintenant capables de construire la cha\u00eene de caract\u00e8res \u00e0 ins\u00e9rer sur l'image. Il reste ... \u00e0 l'ins\u00e9rer. Pour cela, on peut utiliser <code>convert</code> et son \"-draw\". </p> <p>Vous pouvez tester les commandes ci-dessous sur une image redimensionn\u00e9e qu'on appellera img.jpg~: </p><pre><code>$ convert img.jpg -fill white -draw \"text 0,20 'Un super texte'\" res.jpg \n$ convert img.jpg -pointsize 20 -fill white -draw \"text 0,20 'Un super texte'\" res.jpg \n</code></pre> <p>Question</p> <p>Vous pouvez maintenant int\u00e9grer les deux \u00e9l\u00e9ments pr\u00e9c\u00e9dents dans un script <code>scripts/ecrit_date.sh</code> qui prend des chemins d'image dans l'entr\u00e9e standard, et utilise convert et sed pour incruster la date et l'heure dans l'image et sauvegarder les r\u00e9sultats dans le r\u00e9pertoire <code>postproc_images</code></p> <p>Il reste une derni\u00e8re chose \u00e0 faire dans votre script <code>scripts/ecrit_date.sh</code>. Quand nous allons regrouper les images pour en former une vid\u00e9o, il faut que les images portent des noms de fichier qui soient des nombres cons\u00e9cutifs, ie 00000.jpg, 00001.jpg, etc. ; On peut facilement l'ajouter dans le script Bash, en utilisant un compteur incr\u00e9ment\u00e9 \u00e0 chaque fois qu'une image est trait\u00e9e et utiliser la valeur de ce compteur pour construire le nom du fichier cible. Par exemple :</p> <pre><code>$ count=0\n$ echo $count\n0\n$ count=$(expr $count + 1)\n$ echo $count\n1\n</code></pre> <p>Question</p> <p>Vous pouvez terminer votre script en affichant dans la sortie standard le nom du fichier g\u00e9n\u00e9r\u00e9. </p> <p>Sachez n\u00e9anmoins que notre pipeline s'arr\u00eate l\u00e0. La derni\u00e8re \u00e9tape qui consiste \u00e0 cr\u00e9er une vid\u00e9o \u00e0 partir des images se fait une fois que tout le pipeline pr\u00e9c\u00e9dent est termin\u00e9.</p> <p>Question</p> <p>Ajoutez l'appel \u00e0 votre script <code>scripts/ecrit_date.sh</code> dans le script <code>all.sh</code>.</p>"},{"location":"tps/eruption/#et-finalement-la-video","title":"Et finalement, la vid\u00e9o","text":"<p>Il nous reste \u00e0 voir une derni\u00e8re chose: comment fabriquer une vid\u00e9o \u00e0 partir d'une collection d'images? En arrivant \u00e0 cette partie, vous devez d\u00e9j\u00e0 disposer d'un script <code>all.sh</code> qui, lorsqu'il est ex\u00e9cut\u00e9, produit une s\u00e9quence d'images num\u00e9rot\u00e9es successivement dans le r\u00e9pertoire <code>postproc_images</code>, \u00e0 la bonne taille, au format jpg, et dans lesquelles la date et l'heure sont incrust\u00e9es.</p> <p>De mani\u00e8re g\u00e9n\u00e9rale, pour produire une vid\u00e9o \u00e0 partir d'une s\u00e9quence d'images num\u00e9rot\u00e9es successivement, il existe plusieurs outils, notamment mencoder, ffmpeg, avconv. Nous allons ici utiliser <code>ffmpeg</code> </p> <p>La fa\u00e7on la plus simple de g\u00e9n\u00e9rer une vid\u00e9o \u00e0 partir d'une collection d'images JPEG est d'appeler la commande ci-dessous :</p> <pre><code>$ ffmpeg -i mesimages/%05d.jpg mavideo.mp4\n</code></pre> <p>J'ai ici suppos\u00e9 que les images \u00e9taient num\u00e9rot\u00e9es sur \\(5\\) chiffres, c'est ce qu'indique le format \"%05d\", i.e. un nombre sur \\(5\\) chiffres \u00e9ventuellement pr\u00e9c\u00e9d\u00e9s de \\(0\\).\\</p> <p>La vid\u00e9o ainsi g\u00e9n\u00e9r\u00e9e peut para\u00eetre lente. C'est d\u00fb \u00e0 ce qu'on appelle le frame rate, i.e. combien d'images sont affich\u00e9es par seconde. Sachant que nous disposons d'environ \\(2500\\) images pour une journ\u00e9e, si on souhaite que le film ne dure que \\(10\\) secondes, il va falloir utiliser une vitesse de lecture des images de \\(250\\) images par secondes. </p> <p>On peut changer la vitesse de lecture de la s\u00e9quence d'images en pr\u00e9c\u00e9dant l'option \"-i\" par une option \"-r\" comme suit :</p> <pre><code>$ ffmpeg -r 250 -i mesimages/%05d.jpg -r 25 mavideo.mp4\n</code></pre> <p>Pour visualiser la vid\u00e9o, vous pouvez faire appel \u00e0 mplayer, vlc, etc. :</p> <pre><code>vlc mavideo.mp4\n</code></pre> <p>Warning</p> <p>Super important N'oubliez pas de faire le m\u00e9nage sur votre compte en enlevant notamment les images dans les r\u00e9pertoires <code>raw_images</code>, <code>images</code> et <code>postproc_images</code>, soyons num\u00e9riquement responsables !</p>"},{"location":"tps/eruption/#en-bonus-appliquer-des-fausses-couleurs","title":"En bonus: appliquer des fausses couleurs","text":"<p>Jusqu'\u00e0 maintenant, nous avons utilis\u00e9 des images noir et blanc. Simplement, la vid\u00e9o est beaucoup plus sympa si nous lui appliquons des fausses couleurs. </p> <p>Pour appliquer des fausses couleurs, une fa\u00e7on de faire est de se construire un gradient de couleur qui sera ind\u00e9x\u00e9 par la luminance de l'image. On peut par exemple cr\u00e9er un gradient sous gimp, ci-dessous une image \\(600\\times 30\\) avec un d\u00e9grad\u00e9 \"incandescent\".</p> <p></p> <p>L'application du gradient sur l'image noir et blanc peut alors se faire gr\u00e2ce \u00e0 imagemagick. Imagemagick sait en effet utiliser des tables de conversion de couleur, voir http://www.imagemagick.org/Usage/color_mods/#color_lut  (LUT = Look-Up Table):</p> <pre><code>$ convert src.jpg -colorspace gray gradient.jpg -clut out.jpg\n</code></pre> <p>Ce qui nous donne :</p> <p> </p>"},{"location":"tps/eruption/#notes-dinstallation-pour-refaire-le-tp-chez-vous","title":"Notes d'installation pour refaire le TP chez vous","text":"<p>Si vous voulez refaire ce TP chez vous, vous devez installer certains paquets qui ne sont pas install\u00e9s par d\u00e9faut. </p> <p>Sous Fedora, vous devez ex\u00e9cuter :</p> <pre><code>su -c 'dnf install -y ffmpeg ImageMagick mplayer'\n</code></pre> <p>en ayant au pr\u00e9alable install\u00e9 les d\u00e9pots rpmfusion. </p> <p>Sous Ubuntu, </p> <pre><code>sudo apt install avconv imagemagick mplayer openjpeg-tools lynx\n</code></pre> <p>devrait faire l'affaire.</p>"},{"location":"tps/meteo/","title":"TP : \u00c9volution des temp\u00e9ratures aux \u00c9tats-Unis \u00e0 partir des donn\u00e9es NOAA","text":""},{"location":"tps/meteo/#tp-evolution-des-temperatures-aux-etats-unis-a-partir-des-donnees-noaa","title":"TP : \u00c9volution des temp\u00e9ratures aux \u00c9tats-Unis \u00e0 partir des donn\u00e9es NOAA","text":"<p>Cas pratique: Nous allons utiliser une base de donn\u00e9es m\u00e9t\u00e9o disponible en ligne http://www.ncdc.noaa.gov/orders/qclcd/.</p> <p>Cette base de donn\u00e9es contient des archives de relev\u00e9s m\u00e9t\u00e9orologiques depuis 1996. Attention, nous utiliserons pour le moment uniquement les donn\u00e9es de 1996 \u00e0 2007 (le format des donn\u00e9es a chang\u00e9 en 2007, on adaptera tout \u00e0 la fin du sujet notre programme pour qu'il puisse g\u00e9rer ce format l\u00e9g\u00e8rement diff\u00e9rent). Nous souhaitons \u00e9crire un logiciel permettant de visualiser les \u00e9volutions de la temp\u00e9rature sur une p\u00e9riode donn\u00e9e. Pour ce faire nous allons utiliser plusieurs des outils disponibles sous Unix~:</p> <ul> <li>zenity pour saisir les dates limites pour lesquelles effectuer le trac\u00e9,</li> <li>wget pour r\u00e9cup\u00e9rer les archives de donn\u00e9es \u00e0 tracer,</li> <li>awk pour filtrer les enregistrements et n'extraire que les donn\u00e9es \u00e0 tracer,</li> <li>python et le module basemap pour tracer effectivement les donn\u00e9es s\u00e9lectionn\u00e9es,</li> <li>imagemagick pour post-traiter les images,</li> <li>ffmpeg pour g\u00e9n\u00e9rer une vid\u00e9o des images trac\u00e9es pr\u00e9c\u00e9demment,</li> <li>makefile ou bash pour encapsuler l'ensemble dans un script et qui g\u00e9rera l'ex\u00e9cution de tous les processus pr\u00e9c\u00e9dents.</li> </ul> <p>Note</p> <p>Les informations qui figurent dans les fichiers sont document\u00e9es ici http://www.ncdc.noaa.gov/orders/qclcd/ExplanationOfCodes.htm</p> <p>Warning</p> <p>Malheureusement, avec les lois Anti Science et climatosceptiques de l'administration de D. Trump, certaines donn\u00e9es sont supprim\u00e9es ! Des initiatives courageuses ont vu le jour en vue de maintenir des miroirs. </p> <p>En particulier, l'initiative climate mirror qui permet de conserver des copies des donn\u00e9es avant le passage de l'administration de D. Trump.</p> <p>Pour ce TP, nous utiliserons le miroir de ncdc.noaa.gov accessible \u00e0 l'adresse https://s3.ca-central-1.amazonaws.com/climate-mirror/index.html</p> <p>et en particulier le miroir du dataset qclcd :</p> <p>https://s3.ca-central-1.amazonaws.com/climate-mirror/www.ncdc.noaa.gov/orders/qclcd/index.html</p>"},{"location":"tps/meteo/#presentation-du-projet","title":"Pr\u00e9sentation du projet","text":"<p>Les donn\u00e9es m\u00e9t\u00e9o que nous allons utiliser sont disponibles en ligne et fournies par le National Climatic Center de la National Oceanic and Atmospheric Administration (NOAA). Les archives nomm\u00e9es AAAAMM.tar.gz contiennent les mesures pour le mois MM de l'ann\u00e9e AAAA. Les archives de ces donn\u00e9es (les .tar.gz) contiennent 5 fichiers. </p> <ul> <li>station.txt : description des stations d'enregistrements (identifiant WBAN, latitude, longitude, etc..)</li> <li>AAAAMMhpd.txt : mesure des pr\u00e9cipitations</li> <li>AAAAMMhourly.txt, AAAAMMdailyavg.txt, AAAAMMdaily.txt : mesures heure par heure ou journali\u00e8res</li> </ul> <p>Nous utiliserons par la suite uniquement les fichiers station.txt et AAAAMMdaily.txt. Les fichiers de mesures contiennent les mesures de temp\u00e9rature, force du vent etc.. et sont index\u00e9es par l'identifiant WBAN (Weather-Bureau-Army-Navy) de la station de mesure. Pour tracer la carte des temp\u00e9ratures en une date donn\u00e9e, il faudra donc :</p> <ul> <li>r\u00e9cup\u00e9rer l'archive mensuelle qui contient les mesures de cette date</li> <li>filtrer le fichier de mesure AAAAMMdaily.txt pour en extraire les mesures \u00e0 la date souhait\u00e9e</li> <li>combiner ces mesures avec le fichier station.txt pour formater les donn\u00e9es \u00e0 fournir au script de trac\u00e9 (voir plus bas)</li> <li>tracer ces donn\u00e9es</li> </ul> <p></p> <p>Je vous propose la conception sur la figure ci-dessus. </p> <p>Prenons le temps de la comprendre. Nous souhaitons que l'utilisateur puisse pr\u00e9ciser deux dates pour indiquer la p\u00e9riode du trac\u00e9 des mesures (zenity, va nous aider pour \u00e7a). Un module est alors en charge de g\u00e9n\u00e9rer la s\u00e9quence des jours s\u00e9parant ces deux dates limites (on utilisera un petit script awk et les commandes mktime et strftime). L'id\u00e9e est ici de tr\u00e8s t\u00f4t se coller au format du flux d'images que nous souhaitons produire en sortie (i.e. une image par jour) et de s'adapter ensuite au format des donn\u00e9es. Ensuite, \u00e9tant donn\u00e9e une date, e.g. 01/06/2007, on se d\u00e9brouille pour construire l'URL vers le fichier de donn\u00e9es et le t\u00e9l\u00e9charger \u00e0 l'aide de awk. On doit maintenant produire un fichier de donn\u00e9es sp\u00e9cifique \u00e0 la journ\u00e9e et aux donn\u00e9es \u00e0 tracer; on facilite ainsi les traitements suivants en excluant beaucoup de donn\u00e9es inutiles et en faisant le boulot de la fusion des donn\u00e9es g\u00e9ographiques sur les stations et des mesures \u00e0 proprement parler. Arriv\u00e9e l\u00e0, on a quasiment termin\u00e9 le travail. Il suffit de tracer les donn\u00e9es m\u00e9t\u00e9o et on utilisera Python et le module Basemap) pour cela<sup>1</sup>. On se retrouve alors avec une collection d'images qu'il nous suffit d'assembler \u00e0 l'aide de ffmpeg. </p>"},{"location":"tps/meteo/#mise-en-place-du-projet","title":"Mise en place du projet","text":"<p>On va commencer par structurer notre r\u00e9pertoire de travail avec les r\u00e9pertoires et fichiers ci-dessous :</p> <pre><code>Meteo/\n\u251c\u2500 data/\n\u251c\u2500 images/\n\u251c\u2500 videos/\n\u2514\u2500 scripts/\n</code></pre> <p>Question</p> <p>D\u00e9finissez un script bash <code>clean.sh</code> qui supprime tous les \u00e9l\u00e9ments des r\u00e9pertoires data, images et videos.</p>"},{"location":"tps/meteo/#interface-pour-la-requete-zenity","title":"Interface pour la requ\u00eate - zenity","text":"<p>La premi\u00e8re \u00e9tape consiste \u00e0 fournir \u00e0 l'utilisateur une interface simpliste pour saisir les dates de d\u00e9but et de fin de la p\u00e9riode \u00e0 tracer. Comme on ne souhaite pas une interface tr\u00e8s \u00e9volu\u00e9e, on va faire appel \u00e0 un outil tr\u00e8s pratique, zenity. Commen\u00e7ons par voir ce que l'on peut faire avec zenity sachant que vous trouverez une liste compl\u00e8tes des \u00e9l\u00e9ments graphiques cr\u00e9ables avec zenity dans le manuel. </p> <p>Ici, on s'int\u00e9resse essentiellement \u00e0 cr\u00e9er une boite de dialogue avec deux zones de texte pour saisir nos dates, quelque chose qui ressemble \u00e0 la figure ci-dessous fera l'affaire.</p> <p></p> <p>Ex\u00e9cutez l'exemple ci-dessous. </p> <pre><code>$ zenity --forms --text=\"Test\" --add-entry=\"Une entr\u00e9e\"\n$ zenity --entry --text=\"Test\"\n</code></pre> <p>Saisissez un texte dans la zone de texte et validez. Vous observez alors que le texte que vous avez saisi s'affiche dans le terminal; le r\u00e9sultat de la commande est alors le texte que vous avez entr\u00e9. On a d\u00e9j\u00e0 vu dans les TP pr\u00e9c\u00e9dents qu'il est possible d'ex\u00e9cuter des commandes depuis un script bash et gr\u00e2ce \u00e0 zenity, vous pouvez m\u00eame facilement ajouter des \u00e9l\u00e9ments graphiques (basiques, je vous l'accorde, mais \u00e7a nous suffit ici!). </p> <p>Question</p> <p>A l'aide de l'aide en ligne sur zenity, \u00e0 vous de r\u00e9aliser l'interface graphique dont nous avons besoin pour saisir nos deux dates. Celle de la figure ci-dessus contient un formulaire avec deux entr\u00e9es texte et un titre. Pour des raisons pratiques pour la suite, ^^assurez-vous^^ que le s\u00e9parateur est le caract\u00e8re d'espace.</p> <p>Question</p> <p>Placez l'appel \u00e0 zenity dans un script bash que nous appellerons <code>get_date.sh</code>.</p>"},{"location":"tps/meteo/#generation-de-la-sequence-de-dates-python","title":"G\u00e9n\u00e9ration de la s\u00e9quence de dates - python","text":"<p>Il nous faut maintenant, \u00e0 partir de deux dates limites, produire la s\u00e9quence des dates qui les s\u00e9pare. Appelons ce script que nous aimerions \u00e9crire <code>generate_dates.sh</code>, et voyons ce que nous aimerions que ce script fasse.</p> <pre><code>$ echo \"01/06/2007 15/07/2007\" | ./generate_dates.py \n01062007\n02062007\n03062007\n...\n15072007\n</code></pre> <p>On aimerait donc produire une s\u00e9quence de dates. Pourquoi ? Parce qu'on va d\u00e9finir un pipeline qui sera en charge de produire le flux d'images 01062007.png, 02062007.png, ..., 15072007.png. Comment faire ? Comment toujours, on a plusieurs solutions. Il en existe une avec awk, elle est courte mais pas tr\u00e8s rigolote. Je vous propose de voir, au d\u00e9tour de notre probl\u00e8me, l'utilisation de Python (ce sera notre premi\u00e8re application de python et une autre suivra bient\u00f4t). La solution que nous allons proposer est, je trouve, beaucoup plus intelligible que la version awk.</p> <p>On va donc faire un peu de Python. Pour faire du python, vous pouvez soit d\u00e9finir un script (i.e. un fichier texte dont l'extension est habituellement \".py\") soit l'utiliser directement dans le terminal. Avant d'\u00e9crire un script qui va g\u00e9n\u00e9rer la s\u00e9quence des dates, je vous propose de commencer par voir un peu de syntaxe Python directement dans l'interpr\u00e9teur. Lan\u00e7ons python :</p> <pre><code>$ python\nPython 3.10.12 (main, Feb  4 2025, 14:57:36) [GCC 11.4.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n</code></pre> <p>Pour manipuler les dates, il existe le module Python datetime. Pour importer ce module, il suffit d'utiliser la commande import :</p> <pre><code>&gt;&gt;&gt; import datetime\n</code></pre> <p>On peut maintenant instancier des objets du type datetime du module datetime. Par exemple, pour repr\u00e9senter le 01/06/2007 \u00e0 l'aide d'un objet datetime, on utilisera le code ci-dessous (voir la documentation) :</p> <pre><code>&gt;&gt;&gt; begin = datetime.datetime(day=1, month=6, year=2007)\n&gt;&gt;&gt; begin = datetime.datetime(2007, 6, 1)\n&gt;&gt;&gt; print(begin)\ndatetime.datetime(2007, 6, 1, 0, 0)\n</code></pre> <p>La premi\u00e8re fa\u00e7on de construire un objet de type datetime utilise des arguments nomm\u00e9s, la seconde des arguments positionnels (voir la documnetation). L'un des avantages des param\u00e8tres nomm\u00e9s est de pouvoir les positionner dans l'ordre que l'on souhaite. </p> <p>Ce type datetime nous permet de manipuler des dates. Il fournit notamment des op\u00e9rateurs pour incr\u00e9menter une date d'une dur\u00e9e (type datetime.timedelta) arbitraire, de les convertir en une cha\u00eene de caract\u00e8res avec un format d\u00e9termin\u00e9, de v\u00e9rifier si une date pr\u00e9c\u00e8de une autre date, etc... Voici quelques exemples :</p> <pre><code>&gt;&gt;&gt; nextday = begin + datetime.timedelta(days=1)\n&gt;&gt;&gt; nextday\ndatetime.datetime(2007, 6, 2, 0, 0)\n&gt;&gt;&gt; nextday = begin + datetime.timedelta(days=3994)\n&gt;&gt;&gt; nextday\ndatetime.datetime(2018, 5, 8, 0, 0)\n&gt;&gt;&gt; print(nextday.strftime(\"%d/%m/%Y\"))\n08/05/2018\n&gt;&gt;&gt; begin &lt; nextday\nTrue\n&gt;&gt;&gt; begin &gt; nextday\nFalse\n</code></pre> <p>Il nous manque encore quelques ingr\u00e9dients pour pouvoir \u00e9crire notre script <code>generate_dates.py</code> :</p> <ul> <li>comment r\u00e9cup\u00e9rer des arguments pass\u00e9s par l'entr\u00e9e standard \u00e0 un script python</li> <li>les arguments r\u00e9cup\u00e9r\u00e9s \u00e9tant des cha\u00eenes de caract\u00e8res de la forme dd/mm/YYYY, comment y extraire les entiers correspondants au jour, mois et ann\u00e9e</li> <li>comment it\u00e9rer entre deux dates</li> </ul> <p>Pour r\u00e9cup\u00e9rer les arguments pass\u00e9s \u00e0 un script python, qu'on invoquerai <code>python script.py titi ttoto 12</code>, on utiliserait le module \"sys\" et son attribut, de type liste, sys.argv. Ici, nous allons proc\u00e9der de mani\u00e8re un peu diff\u00e9rente puisqu'on souhaite passer les arguments ^^par l'entr\u00e9e standard^^, i.e. quelque chose du type :</p> <pre><code>$ echo \"01/06/2007 15/07/2007\" | ./generate_dates.py\n</code></pre> <p>J'ai ici utilis\u00e9 echo pour avoir un exemple sous la main pour tester mais en pratique c'est votre script <code>get_dates.sh</code> qui nous fournirait dans la sortie standard les dates limites. En python, on peut lire directement de stdin<sup>2</sup>}. M\u00eame si la syntaxe ci-dessous a l'air un peu compliqu\u00e9, c'est \u00e0 ma connaissance la seule qui garantisse que python ne bufferise pas ses entr\u00e9es et les traite bien d\u00e9s qu'elles sont \u00e9mises par le script qui \u00e9crit dans son entr\u00e9e standard. Un exemple de script python, que nous appellerons <code>test_stdin.py</code>, est donn\u00e9 ci-dessous :</p> <pre><code>#!/usr/bin/python\n\nimport sys\n\nwhile(True):\n    l = sys.stdin.readline()\n    if(l == ''):\n        break\n    sys.stdout.write(\"[test_stdin.py] a lu %s \" % l)\n</code></pre> <p>Question</p> <p>Prenez vous un fichier texte, appelons le monfichier et testez le script ci-dessus :</p> <pre><code>$ cat monfichier | ./test_stdin.py\n</code></pre> <p>Testons le maintenant avec le type d'entr\u00e9e qu'il va recevoir :</p> <pre><code>$ echo \"01/06/2007 15/07/2007\" | ./test_stdin.py\n</code></pre> <p>Maintenant, il va falloir travailler un peu la ligne lue puisque je vous rappelle que nous devons r\u00e9cup\u00e9rer des entiers correspondants au jour, mois et ann\u00e9e des dates de d\u00e9but et fin. Ce qu'on cherche essentiellement \u00e0 faire, c'est diviser les cha\u00eenes de caract\u00e8res pour :</p> <ol> <li>isoler la date de d\u00e9but de la date de fin</li> <li>extraire les \u00e9l\u00e9ments de chacune des dates. </li> </ol> <p>Testez les exemples ci-dessous : </p><pre><code>&gt;&gt;&gt; l = \"01/06/2007 15/07/2007\".split()\n&gt;&gt;&gt; print(l)\n['01/06/2007', '15/07/2007']\n&gt;&gt;&gt; begin=l[0].split(\"/\")\n&gt;&gt;&gt; print(begin)\n['01', '06', '2007']\n&gt;&gt;&gt; dd=int(begin[0])\n&gt;&gt;&gt; mm=int(begin[1])\n&gt;&gt;&gt; yyy=int(begin[2])\n</code></pre> <p>Question</p> <p>Vous disposez maintenant de tous les \u00e9l\u00e9ments pour \u00e9crire le script python <code>generate_dates.py</code>. A vous de jouer.</p> <p>Testez le : </p><pre><code>$ echo \"01/06/2007 15/07/2007\" | ./generate_dates.py \n01062007\n02062007\n03062007\n...\n15072007\n</code></pre> <p>Et bien s\u00fbr, testez \u00e9galement le pipeline :</p> <pre><code>$ ./get_dates.sh | ./generate_dates.py \n</code></pre>"},{"location":"tps/meteo/#telechargement-extraction-et-filtrage-des-donnees-tar-wget-grep-awk-sed","title":"T\u00e9l\u00e9chargement, extraction et filtrage des donn\u00e9es - tar wget grep awk sed","text":"<p>Maintenant que nous disposons d'un g\u00e9n\u00e9rateur des dates (<code>generate_dates.py</code> produit la s\u00e9quence des dates dans la sortie standard), nous pouvons g\u00e9rer la partie qui consiste \u00e0 t\u00e9l\u00e9charger les donn\u00e9es n\u00e9cessaires au trac\u00e9. Nous allons \u00e9crire ce script en Bash. </p> <p>Vous vous rappelez que nous disposons de donn\u00e9es journali\u00e8res au sein d'une archive mensuelle. Par exemple, l'archive \"200706.tar.gz\" contient toutes les donn\u00e9es pour tous les jours du mois de juin. Il faut donc que notre script de t\u00e9l\u00e9chargement/extraction fasse plusieurs choses, \u00e9tant donn\u00e9e une date d'entr\u00e9e :</p> <ul> <li>v\u00e9rifie si l'archive du mois de la date est pas d\u00e9j\u00e0 t\u00e9l\u00e9charg\u00e9e. Si elle ne l'est pas, on la t\u00e9l\u00e9charge, on l'extrait dans le r\u00e9pertoire data (et on renomme le fichier station pour lui ajouter le pr\u00e9fixe YYYYMM)</li> <li>filtre le fichier de donn\u00e9es pour construire un fichier de donn\u00e9es sp\u00e9cifique \u00e0 la date qui nous int\u00e9resse.</li> </ul> <p>G\u00e9n\u00e9ration des noms des archives:</p> <p>Commen\u00e7ons par le premier point. Les dates vont \u00eatre fournies par l'entr\u00e9e standard \u00e0 notre script <code>get_data.sh</code>. Il faut extraire ce que nous lisons de l'entr\u00e9e standard (e.g. 01062007) le jour, le mois et l'ann\u00e9e. En bash, on peut extraire des sous-cha\u00eenes d'une cha\u00eene <code>s</code> par l'appel <code>${s:debut:longueur}</code>, par exemple:</p> <pre><code>$ date=\"01062007\"; echo \"Day : ${date:0:2}\"\nDay : 01\n</code></pre> <p>Question</p> <p>Compl\u00e9tez votre script <code>get_data.sh</code> pour qu'il construire la cha\u00eene de caract\u00e8re correspondant \u00e0 l'archive dans laquelle se trouve les donn\u00e9es d'une journ\u00e9e. Par exemple, pour le 01/06/2007, cela doit donner 200706.tar.gz.</p> <p>Assurez vous du bon fonctionnement de votre script :</p> <pre><code>$ echo \"01062007\" | ./scripts/get_data.sh\n</code></pre>"},{"location":"tps/meteo/#recuperation-des-donnees-brutes-dune-journee","title":"R\u00e9cup\u00e9ration des donn\u00e9es brutes d'une journ\u00e9e:","text":"<p>Maintenant que nous disposons du nom de l'archive, e.g. 200706.tar.gz, on va d'abord v\u00e9rifier si le fichier local <code>Data/200706.tar.gz</code> existe d\u00e9j\u00e0, sinon on le r\u00e9cup\u00e8re<sup>3</sup>. En bash, pour v\u00e9rifier si un fichier existe, on utilise le test conditionnel \"if [ -f filename ]\", par exemple :</p> <pre><code>#!/bin/bash\n\necho \"Ce script teste l'existence d'un fichier pass\u00e9 en argument\"\n\nif [ $# != 1 ]\nthen\n    echo \"Vous devez passer un fichier en argument\"\n    exit\nfi\n\nif [ -f $1 ]\nthen\n    echo \"Le fichier $1 existe !\"\nelse\n    echo \"Le fichier $1 n'existe pas !\"\nfi\n</code></pre> <p>Question</p> <p>Compl\u00e9tez votre script <code>get_data.sh</code> pour qu'il teste si l'archive recherch\u00e9e est d\u00e9j\u00e0 disponible en local et sinon la t\u00e9l\u00e9charge (souvenez vous de la commande wget utilis\u00e9e dans le premier TP).</p> <p>Extraction des donn\u00e9es pertinentes</p> <p>L'archive que nous venons de t\u00e9l\u00e9charger est une archive \".tar.gz\". Pour l'extraire, nous utilisons l'outil tar :</p> <pre><code>tar -zxf monarchive.tar.gz\n</code></pre> <p>Que signifient ces options<sup>4</sup>? \"-x\" signifie qu'on extrait (on pourrait aussi cr\u00e9er une archive avec \"-c\"), \"-f\" signifie qu'on utilise un fichier (on peut (d\u00e9-)compresser l'entr\u00e9e standard :) ) et \"-z\" qu'on compresse avec gzip (il existe d'autres m\u00e9thodes de compression).</p> <p>On peut m\u00eame faire mieux en sp\u00e9cifiant quels fichiers nous souhaitons extraire de l'archive. En effet, nos archives contiennent plus de fichiers que n\u00e9cessaires et nous ne voulons en extraire que les fichiers xxxxdaily.txt et station.txt. Il suffit de le sp\u00e9cifier sur la ligne de commande :</p> <pre><code>tar -zxf monarchive.tar.gz monfichier1.txt monfichier2.txt chemin/vers/monfichier3.txt\n</code></pre> <p>Vous savez maintenant comment extraire les deux fichiers \"station.txt\" et \"xxxdaily.txt\". </p> <p>On va r\u00e9aliser une derni\u00e8re op\u00e9ration sur le fichier station.txt qui consiste \u00e0 en extraire uniquement les donn\u00e9es de WBAN, latitude et longitude. A l'aide de awk, extrayez les 3 champs pertinents et redirigez la sortie de votre appel awk dans le fichier xxxxstation.txt avec xxxx un prefixe de la forme YYYYmm. Vous pourrez alors \u00e9galement supprimer le fichier station.txt et l'archive xxxx.tar.gz.</p>"},{"location":"tps/meteo/#filtrage-des-donnees-pertinentes-du-fichier-daily-awk-sed-join","title":"Filtrage des donn\u00e9es pertinentes du fichier daily: awk, sed, join","text":"<p>Pour pouvoir effectuer notre trac\u00e9 des temp\u00e9ratures sur le territoire am\u00e9ricain, il nous faut plusieurs choses: les temp\u00e9ratures et les positions g\u00e9ographiques des enregistrements. Les fichiers xxxxdaily.txt contiennent \u00e9norm\u00e9ment d'informations, dont un grand nombre est inutile pour notre application. Les stations d'enregistrement dans les fichiers xxxxdaily.txt sont index\u00e9es par leur WBAN mais la position g\u00e9ographique d'une station est quant \u00e0 elle disponible dans le fichier xxxxstation.txt que nous venons de cr\u00e9er. Il nous faut donc extraire uniquement les temp\u00e9ratures et les WBAN du fichier xxxxdaily.txt et combiner cela avec le fichier de station. Nous allons pour cela utiliser plusieurs outils en un pipeline. </p> <p>Si vous inspectez un fichier xxxxdaily.txt, vous pouvez remarquer que, parfois, la temp\u00e9rature est \u00e9gale \u00e0 'M' ou '-' correspondant \u00e0 une valeur invalide, parfois elle est suffix\u00e9e par une \u00e9toile; on aimerait supprimer les entr\u00e9es invalides et supprimer les \"*\" suffixant certaines temp\u00e9ratures; d\u00e9finissions un pipeline avec :</p> <ul> <li><code>awk</code> pour extraire uniquement les WBAN et temp\u00e9ratures moyennes de la date consid\u00e9r\u00e9e,</li> <li><code>awk</code> pour supprimer les entr\u00e9es pour lesquelles la temp\u00e9rature est \u00e9gale \u00e0 \"M\" ou '-', ce qui correspond \u00e0 une entr\u00e9e invalide,</li> <li><code>sed</code> pour substituer les \"*\" par un caract\u00e8re vide \"\".</li> </ul> <p>Enfin, utilisez <code>join</code> pour combiner les donn\u00e9es ainsi g\u00e9n\u00e9r\u00e9es avec le fichier xxxxstation.txt. join peut prendre deux fichiers en argument pour les combiner mais il accepte \u00e9galement qu'on remplace un des fichiers par l'entr\u00e9e standard en pr\u00e9cisant \"-\" comme nom de fichier; voyons quelques exemples :</p> <pre><code>$ cat toto.txt\na a1\nb b1\nc c1\n\n$ cat titi.txt\na a2 a3\nb b2 b3\nc c2 c3\n\n$ join toto.txt titi.txt\na a1 a2 a3\nb b1 b2 b3\nc c1 c2 c3\n\n$ cat toto.txt | join - titi.txt\na a1 a2 a3\nb b1 b2 b3\nc c1 c2 c3\n</code></pre> <p>L'int\u00e9r\u00eat de la derni\u00e8re commande est de pouvoir mettre l'appel join dans un pipeline pour combiner \u00e0 la vol\u00e9e l'entr\u00e9e standard avec un fichier. Vous devriez maintenant avoir tous les \u00e9l\u00e9ments pour produire un fichier de donn\u00e9es qui contiennent les WBAN, longitudes, latitudes et temp\u00e9ratures moyennes mesur\u00e9es. Par exemple, vous devriez pouvoir produire le fichier 01062006.txt ci-dessous en invoquant votre script <code>get_data.sh</code>.</p> <pre><code>$ cat Data/01062006.txt\n03013 38.04 -102.41 67 \n03016 39.32 -107.44 64 \n03017 39.50 -104.4 63 \n03024 35.42 -101.23 73 \n03026 39.14 -102.17 62\n03027 35.00 -105.4 63 \n03028 37.17 -102.37 66\n....\n</code></pre> <p>Question</p> <p>A vous de jouer et finalisez votre script <code>get_data.sh</code></p>"},{"location":"tps/meteo/#trace-des-donnees-python","title":"Trac\u00e9 des donn\u00e9es - python","text":"<p>Il nous reste maintenant \u00e0 effectuer le trac\u00e9 des donn\u00e9es extraites. On va partir d'un fichier de donn\u00e9es exemple comme Data/01062006.txt. Les mesures sont ponctuelles et nous aimerions les interpoler sur tout le territoire. Nous aimerions \u00e9galement tracer ces donn\u00e9es sur une carte du territoire am\u00e9ricain. Pour cela, nous allons utiliser Python et ses modules <code>scipy</code> pour l'interpolation et <code>basemap</code> pour le trac\u00e9 des cartes. Nous allons proc\u00e9der par \u00e9tape~:</p> <ul> <li>tracer la carte,</li> <li>r\u00e9cup\u00e9rer les donn\u00e9es brutes et les tracer sur la carte,</li> <li>interpoler ces donn\u00e9es sur une grille et tracer les donn\u00e9es interpol\u00e9es,</li> <li>limiter le trac\u00e9 aux terres.</li> </ul>"},{"location":"tps/meteo/#trace-de-la-carte","title":"Trac\u00e9 de la carte","text":"<p>Pour tracer la carte du territoire am\u00e9ricain, nous utilisons le module basemap. Inspirez vous du script d'exemple de basemap sur https://matplotlib.org/basemap/stable/users/cyl.html sur les coordonn\u00e9es cylindriques pour effectuer un trac\u00e9 du territoire am\u00e9ricain. Un exemple de trac\u00e9 est repr\u00e9sent\u00e9 ci-dessous.</p> <p></p>"},{"location":"tps/meteo/#trace-des-donnees-brutes","title":"Trac\u00e9 des donn\u00e9es brutes","text":"<p>La deuxi\u00e8me \u00e9tape consiste \u00e0 importer les donn\u00e9es pr\u00e9c\u00e9demment filtr\u00e9es et \u00e0 les tracer sur la carte. Pour charger des donn\u00e9es d'un fichier texte, organis\u00e9es en colonnes, le plus simple est d'utiliser la fonction loadtxt du module numpy. Le script ci-dessous vous montre un exemple d'utilisation :</p> <pre><code>#!/usr/bin/python\n# coding: utf-8\n\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(\"Je teste le chargement de donn\u00e9es\")\n\nif(len(sys.argv) != 2):\n    print(\"Usage : {} datefile\".format(sys.argv[0]))\n    sys.exit(-1)\n\n# On recupere le chemin vers les donnees\ndatafile=sys.argv[1]\n\n# On les charge\ndata = np.loadtxt(datafile)\n\n# Et pour rigoler, on trace les temperatures\nplt.figure()\nplt.plot(data[:,3])\nplt.title(\"Temp\u00e9ratures moyennes (deg K)\")\nplt.show()\n</code></pre> <p>Ces donn\u00e9es forment un ensemble non structur\u00e9 de points; pour les tracer, nous utilisons ce qui s'appelle un scatter plot. Mais, pour correctement tracer les donn\u00e9es, il faut d'abord projeter les longitudes et latitudes des points de mesure sur la carte. L'object Basemap que nous avons construit lors du trac\u00e9 de la carte peut \u00eatre appliqu\u00e9 \u00e0 des vecteurs de longitudes et latitudes pour calculer leur projet\u00e9s.</p> <pre><code># On suppose que data est un vecteur \u00e0 3 colonnes\n# data[:,0] contient les longitudes\n# data[:,1] contient les latitudes\n# data[:,2] contient les temp\u00e9ratures\n\nm = Basemap(projection='cyl',\n            llcrnrlat=25,urcrnrlat=50,\n            llcrnrlon=-130,urcrnrlon=-60,resolution='l')\n\nx, y = m(data[:,0], data[:,1])\nfig = plt.figure()\nm.drawcoastlines()\nplt.scatter(x, y, c=data[:,2])\nplt.show()\n</code></pre> <p>Question</p> <p>Faites maintenant le trac\u00e9 des mesures brutes. N'oubliez pas de convertir les temp\u00e9ratures en degr\u00e9s Celsius. Vous devriez obtenir quelque chose comme la figure ci-dessous pour le 1\\(^{er}\\) juin 2006.</p> <p></p>"},{"location":"tps/meteo/#interpolation","title":"Interpolation","text":"<p>Il nous faut maintenant interpoler les donn\u00e9es brutes pour estimer les temp\u00e9ratures sur tout le territoire. Il existe plusieurs algorithmes d'interpolation fournis par le module scipy. Nous allons utiliser la fonction <code>griddata</code> pour interpoler en 2D \u00e0 partir de donn\u00e9es non-structur\u00e9es. Vous trouverez un exemple d'utilisation dans la documentation de griddata. </p> <p>Question</p> <p>Adaptez cet exemple pour interpoler les donn\u00e9es m\u00e9t\u00e9o sur une grille de \\(100\\times 100\\) points. Quelques exemples de r\u00e9sultat sont illustr\u00e9s sur la figure ci-dessous.</p> <p> </p>"},{"location":"tps/meteo/#et-finalement","title":"Et finalement....","text":"<p>Il reste maintenant \u00e0 int\u00e9grer tout ce qu'on a vu pour le trac\u00e9 des donn\u00e9es dans un script <code>plot_temperatures.py</code>. Pour cela, il nous manque encore quelques \u00e9l\u00e9ments, \u00e0 savoir :</p> <ol> <li>lire dans l'entr\u00e9e standard, depuis Python, un fichier de donn\u00e9es,</li> <li>sauvegarder l'image g\u00e9n\u00e9r\u00e9e par python. </li> </ol> <p>Pour sauvegarder l'image depuis Python, c'est relativement simple, il suffit d'appeler savefig de la mani\u00e8re suivante :</p> <pre><code>plt.savefig(output_filname, bbox_inches='tight')\n</code></pre> <p>L'option \"bbox_inches='tight'\" garantie que la bounding-box de l'image colle au mieux aux \u00e9l\u00e9ments graphiques.</p> <p>Et pour ce qui est de lire des \u00e9l\u00e9ments de l'entr\u00e9e standard, voici un exemple en python :</p> <pre><code>import sys\nimport os\n\ncount = 0\n\nwhile(True):\n    line = sys.stdin.readline()\n    if(line == ''):\n        break\n\n    # On supprime le passage \u00e0 la ligne \u00e0 la fin de la ligne lue\n    datafile = line.rstrip('\\n')\n\n    filename = os.path.basename(datafile)\n    output_filename = \"Images/%05d.png\" % count\n\n    .... on fait le trac\u00e9 ....\n\n    plt.savefig(output_filename, bbox_inches='tight')\n    count = count + 1\n</code></pre>"},{"location":"tps/meteo/#incruster-la-date-et-generer-la-video-imagemagick-ffmpeg","title":"Incruster la date et g\u00e9n\u00e9rer la vid\u00e9o - imagemagick, ffmpeg","text":"<p>Pour terminer, il reste \u00e0 incruster la date dans les images et \u00e0 g\u00e9n\u00e9rer une vid\u00e9o \u00e0 partir des images que vous venez de produire. Comme pour le TP sur le soleil, nous utiliserons imagemagick et ffmpeg. On attendra \u00e9galement que toutes les images soient produites avant d'ex\u00e9cuter ffmpeg.</p> <p></p>"},{"location":"tps/meteo/#gerons-les-fichiers-de-donnees-au-dela-de-mai-2007","title":"G\u00e9rons les fichiers de donn\u00e9es au del\u00e0 de Mai 2007","text":"<p>Il n'y que peu de modifications \u00e0 apporter au pipeline pour pouvoir g\u00e9rer les fichiers de donn\u00e9es au del\u00e0 de mai 2007. En pratique, il y a :</p> <ol> <li>le nom de l'archive qui change,</li> <li>le nom du fichier station dans l'archive. </li> </ol> <p>Pour adapter votre programme, je vous sugg\u00e8re : </p> <ul> <li>de modifier <code>generate_dates.py</code> pour qu'il \u00e9mette deux \u00e9l\u00e9ments dans la sortie standard, \u00e0 savoir la date \u00e0 laquelle l'image doit \u00eatre g\u00e9n\u00e9r\u00e9e et un mode (0 ou 1) qui indique si la date demand\u00e9e pr\u00e9c\u00e8de ou non mai 2007 (les objets de type datetime en python savent se comparer),</li> <li>de modifier <code>get_data.sh</code> pour qu'il capture les deux entr\u00e9es transmises par <code>generate_dates.py</code>. En fonction du mode il faudra t\u00e9l\u00e9charger et g\u00e9rer les archives diff\u00e9remment.</li> </ul> <p>Sachez que vous pouvez, tout comme pour une archive .tar.gz, extraire un seul fichier d'un fichier zip :</p> <pre><code>$ unzip -p monarchive.zip monfichier1.txt &gt; monfichier1.txt\n$ unzip -p monarchive.zip chemin/vers/monfichier2.txt &gt; monfichier2.txt\n</code></pre> <p>Enfin, si plusieurs arguments sont pass\u00e9s dans l'entr\u00e9e standard d'un script bash, on peut facilement les extraire de la mani\u00e8re ci-dessous : </p> <p></p><pre><code>#!/bin/bash\n\nwhile read -r input\ndo\n    inputarray=($input)\n    echo \"${inputarray[0]} ; ${inputarray[1]}\"\ndone\n</code></pre> <pre><code>$ echo \"titi toto\" | ./stdread_multi.sh \ntiti ; toto\n</code></pre> <ol> <li> <p>On peut faire des trac\u00e9s tr\u00e8s sympa avec basemap!!\u00a0\u21a9</p> </li> <li> <p>on peut m\u00eame it\u00e9rer sur le descripteur de fichier sys.stdin, mais cette approche bufferise la lecture...\u00a0\u21a9</p> </li> <li> <p>En pratique, on pourrait \u00eatre un peu plus malin. On ne va retenir qu'une partie des donn\u00e9es de l'archive. L'archive est grosse. On pourrait donc v\u00e9rifier si les donn\u00e9es extraites et retenues de l'archive sont d\u00e9j\u00e0 pr\u00e9sentes\u00a0\u21a9</p> </li> <li> <p>n'h\u00e9sitez pas \u00e0 aller jeter un oeil au manuel:  <code>man tar</code> \u21a9</p> </li> </ol>"}]}